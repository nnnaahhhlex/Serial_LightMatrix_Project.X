

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Jun 24 11:58:44 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F690
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,merge=1,delta=2
    13                           	psect	text7,local,class=CODE,merge=1,delta=2
    14                           	psect	text8,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F690 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  008F                     	;# 
    91  0090                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0093                     	;# 
    95  0093                     	;# 
    96  0094                     	;# 
    97  0095                     	;# 
    98  0095                     	;# 
    99  0096                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  0115                     	;# 
   114  0116                     	;# 
   115  0118                     	;# 
   116  0119                     	;# 
   117  011A                     	;# 
   118  011B                     	;# 
   119  011E                     	;# 
   120  011F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  019D                     	;# 
   124  019E                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  0081                     	;# 
   157  0085                     	;# 
   158  0086                     	;# 
   159  0087                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  008F                     	;# 
   164  0090                     	;# 
   165  0092                     	;# 
   166  0093                     	;# 
   167  0093                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0095                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0096                     	;# 
   174  0097                     	;# 
   175  0098                     	;# 
   176  0099                     	;# 
   177  009A                     	;# 
   178  009B                     	;# 
   179  009E                     	;# 
   180  009F                     	;# 
   181  010C                     	;# 
   182  010C                     	;# 
   183  010D                     	;# 
   184  010E                     	;# 
   185  010F                     	;# 
   186  0115                     	;# 
   187  0116                     	;# 
   188  0118                     	;# 
   189  0119                     	;# 
   190  011A                     	;# 
   191  011B                     	;# 
   192  011E                     	;# 
   193  011F                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196  019D                     	;# 
   197  019E                     	;# 
   198  0006                     _PORTBbits	set	6
   199  0007                     _PORTCbits	set	7
   200  008F                     _OSCCON	set	143
   201  0086                     _TRISB	set	134
   202  0087                     _TRISC	set	135
   203                           
   204                           	psect	cinit
   205  07FD                     start_initialization:	
   206                           ; #config settings
   207                           
   208  07FD                     __initialization:
   209  07FD                     end_of_initialization:	
   210                           ;End of C runtime variable initialization code
   211                           
   212  07FD                     __end_of__initialization:
   213  07FD  0183               	clrf	3
   214  07FE  118A  2E8B         	ljmp	_main	;jump to C main() function
   215                           
   216                           	psect	cstackCOMMON
   217  0070                     __pcstackCOMMON:
   218  0070                     ?_initiate:
   219  0070                     ??_initiate:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_red_arrow:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_green_arrow:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_input_high:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_input_low:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_serial_clock_pulse:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ??_serial_clock_pulse:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_main:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_input_data:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_latch_output:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ??_latch_output:	
   250                           ; 1 bytes @ 0x0
   251                           
   252                           
   253                           ; 1 bytes @ 0x0
   254  0070                     	ds	1
   255  0071                     ??_input_high:
   256  0071                     ??_input_low:	
   257                           ; 1 bytes @ 0x1
   258                           
   259  0071                     ??_input_data:	
   260                           ; 1 bytes @ 0x1
   261                           
   262  0071                     input_data@num:	
   263                           ; 1 bytes @ 0x1
   264                           
   265                           
   266                           ; 1 bytes @ 0x1
   267  0071                     	ds	1
   268  0072                     ??_red_arrow:
   269  0072                     ??_green_arrow:	
   270                           ; 1 bytes @ 0x2
   271                           
   272                           
   273                           ; 1 bytes @ 0x2
   274  0072                     	ds	2
   275  0074                     green_arrow@col:
   276  0074                     red_arrow@col:	
   277                           ; 1 bytes @ 0x4
   278                           
   279                           
   280                           ; 1 bytes @ 0x4
   281  0074                     	ds	1
   282  0075                     green_arrow@row:
   283  0075                     red_arrow@row:	
   284                           ; 1 bytes @ 0x5
   285                           
   286                           
   287                           ; 1 bytes @ 0x5
   288  0075                     	ds	1
   289  0076                     green_arrow@i:
   290  0076                     red_arrow@i:	
   291                           ; 2 bytes @ 0x6
   292                           
   293                           
   294                           ; 2 bytes @ 0x6
   295  0076                     	ds	2
   296  0078                     ??_main:
   297                           
   298                           ; 1 bytes @ 0x8
   299  0078                     	ds	3
   300                           
   301                           	psect	maintext
   302  068B                     __pmaintext:	
   303 ;;
   304 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   305 ;;
   306 ;; *************** function _main *****************
   307 ;; Defined at:
   308 ;;		line 33 in file "Main.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : B00/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   322 ;;      Params:         0       0       0       0
   323 ;;      Locals:         0       0       0       0
   324 ;;      Temps:          3       0       0       0
   325 ;;      Totals:         3       0       0       0
   326 ;;Total ram usage:        3 bytes
   327 ;; Hardware stack levels required when called: 4
   328 ;; This function calls:
   329 ;;		_green_arrow
   330 ;;		_initiate
   331 ;;		_red_arrow
   332 ;; This function is called by:
   333 ;;		Startup code after reset
   334 ;; This function uses a non-reentrant model
   335 ;;
   336                           
   337                           
   338                           ;psect for function _main
   339  068B                     _main:
   340  068B                     l851:	
   341                           ;incstack = 0
   342                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   343                           
   344                           
   345                           ;Main.c: 34:     initiate();
   346  068B  118A  2653  118A   	fcall	_initiate
   347  068E                     l853:
   348                           
   349                           ;Main.c: 36:         red_arrow();
   350  068E  118A  2783  118A   	fcall	_red_arrow
   351  0691                     l855:
   352                           
   353                           ;Main.c: 37:         _delay((unsigned long)((2500)*(8000000/4000.0)));
   354  0691  301A               	movlw	26
   355  0692  00FA               	movwf	??_main+2
   356  0693  305E               	movlw	94
   357  0694  00F9               	movwf	??_main+1
   358  0695  306E               	movlw	110
   359  0696  00F8               	movwf	??_main
   360  0697                     u297:
   361  0697  0BF8               	decfsz	??_main,f
   362  0698  2E97               	goto	u297
   363  0699  0BF9               	decfsz	??_main+1,f
   364  069A  2E97               	goto	u297
   365  069B  0BFA               	decfsz	??_main+2,f
   366  069C  2E97               	goto	u297
   367  069D  0000               	nop
   368  069E                     l857:
   369                           
   370                           ;Main.c: 38:         green_arrow();
   371  069E  118A  270B  118A   	fcall	_green_arrow
   372  06A1                     l859:
   373                           
   374                           ;Main.c: 39:         _delay((unsigned long)((2500)*(8000000/4000.0)));
   375  06A1  301A               	movlw	26
   376  06A2  00FA               	movwf	??_main+2
   377  06A3  305E               	movlw	94
   378  06A4  00F9               	movwf	??_main+1
   379  06A5  306E               	movlw	110
   380  06A6  00F8               	movwf	??_main
   381  06A7                     u307:
   382  06A7  0BF8               	decfsz	??_main,f
   383  06A8  2EA7               	goto	u307
   384  06A9  0BF9               	decfsz	??_main+1,f
   385  06AA  2EA7               	goto	u307
   386  06AB  0BFA               	decfsz	??_main+2,f
   387  06AC  2EA7               	goto	u307
   388  06AD  0000               	nop
   389  06AE  2E8E               	goto	l853
   390  06AF  118A  2800         	ljmp	start
   391  06B1                     __end_of_main:
   392                           
   393                           	psect	text1
   394  0783                     __ptext1:	
   395 ;; *************** function _red_arrow *****************
   396 ;; Defined at:
   397 ;;		line 285 in file "Main.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;  row             1    5[COMMON] unsigned char 
   402 ;;  col             1    4[COMMON] unsigned char 
   403 ;;  i               2    6[COMMON] int 
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      void 
   406 ;; Registers used:
   407 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   413 ;;      Params:         0       0       0       0
   414 ;;      Locals:         4       0       0       0
   415 ;;      Temps:          2       0       0       0
   416 ;;      Totals:         6       0       0       0
   417 ;;Total ram usage:        6 bytes
   418 ;; Hardware stack levels used: 1
   419 ;; Hardware stack levels required when called: 3
   420 ;; This function calls:
   421 ;;		_input_data
   422 ;;		_latch_output
   423 ;; This function is called by:
   424 ;;		_main
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428                           
   429                           ;psect for function _red_arrow
   430  0783                     _red_arrow:
   431  0783                     l765:	
   432                           ;incstack = 0
   433                           ; Regs used in _red_arrow: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   434                           
   435                           
   436                           ;Main.c: 286:     for (int i = 0; i < 8; i++) {
   437  0783  01F6               	clrf	red_arrow@i
   438  0784  01F7               	clrf	red_arrow@i+1
   439  0785                     l771:
   440                           
   441                           ;Main.c: 287:         unsigned char row = 0b10000000;
   442  0785  3080               	movlw	128
   443  0786  00F2               	movwf	??_red_arrow
   444  0787  0872               	movf	??_red_arrow,w
   445  0788  00F5               	movwf	red_arrow@row
   446  0789                     l773:
   447  0789                     l775:
   448                           
   449                           ;Main.c: 290:         if (i != 0) {
   450  0789  0876               	movf	red_arrow@i,w
   451  078A  0477               	iorwf	red_arrow@i+1,w
   452  078B  1903               	btfsc	3,2
   453  078C  2F8E               	goto	u91
   454  078D  2F8F               	goto	u90
   455  078E                     u91:
   456  078E  2F9C               	goto	l779
   457  078F                     u90:
   458  078F                     l777:
   459                           
   460                           ;Main.c: 291:             row = (row >> i);
   461  078F  0875               	movf	red_arrow@row,w
   462  0790  00F2               	movwf	??_red_arrow
   463  0791  0A76               	incf	red_arrow@i,w
   464  0792  2F95               	goto	u104
   465  0793                     u105:
   466  0793  1003               	clrc
   467  0794  0CF2               	rrf	??_red_arrow,f
   468  0795                     u104:
   469  0795  3EFF               	addlw	-1
   470  0796  1D03               	skipz
   471  0797  2F93               	goto	u105
   472  0798  0872               	movf	??_red_arrow,w
   473  0799  00F3               	movwf	??_red_arrow+1
   474  079A  0873               	movf	??_red_arrow+1,w
   475  079B  00F5               	movwf	red_arrow@row
   476  079C                     l779:
   477                           
   478                           ;Main.c: 294:         input_data(row);
   479  079C  0875               	movf	red_arrow@row,w
   480  079D  118A  26B1  118A   	fcall	_input_data
   481  07A0                     l781:
   482                           
   483                           ;Main.c: 297:         if (i == 7) {
   484  07A0  3007               	movlw	7
   485  07A1  0676               	xorwf	red_arrow@i,w
   486  07A2  0477               	iorwf	red_arrow@i+1,w
   487  07A3  1D03               	btfss	3,2
   488  07A4  2FA6               	goto	u111
   489  07A5  2FA7               	goto	u110
   490  07A6                     u111:
   491  07A6  2FAC               	goto	l785
   492  07A7                     u110:
   493  07A7                     l783:
   494                           
   495                           ;Main.c: 299:             col = 24;
   496  07A7  3018               	movlw	24
   497  07A8  00F2               	movwf	??_red_arrow
   498  07A9  0872               	movf	??_red_arrow,w
   499  07AA  00F4               	movwf	red_arrow@col
   500                           
   501                           ;Main.c: 300:         } else if (i == 0 || i == 1 || i == 2 || i == 3 || i == 6) {
   502  07AB  2FE2               	goto	l803
   503  07AC                     l785:
   504  07AC  0876               	movf	red_arrow@i,w
   505  07AD  0477               	iorwf	red_arrow@i+1,w
   506  07AE  1903               	btfsc	3,2
   507  07AF  2FB1               	goto	u121
   508  07B0  2FB2               	goto	u120
   509  07B1                     u121:
   510  07B1  2FCD               	goto	l795
   511  07B2                     u120:
   512  07B2                     l787:
   513  07B2  0376               	decf	red_arrow@i,w
   514  07B3  0477               	iorwf	red_arrow@i+1,w
   515  07B4  1903               	btfsc	3,2
   516  07B5  2FB7               	goto	u131
   517  07B6  2FB8               	goto	u130
   518  07B7                     u131:
   519  07B7  2FCD               	goto	l795
   520  07B8                     u130:
   521  07B8                     l789:
   522  07B8  3002               	movlw	2
   523  07B9  0676               	xorwf	red_arrow@i,w
   524  07BA  0477               	iorwf	red_arrow@i+1,w
   525  07BB  1903               	btfsc	3,2
   526  07BC  2FBE               	goto	u141
   527  07BD  2FBF               	goto	u140
   528  07BE                     u141:
   529  07BE  2FCD               	goto	l795
   530  07BF                     u140:
   531  07BF                     l791:
   532  07BF  3003               	movlw	3
   533  07C0  0676               	xorwf	red_arrow@i,w
   534  07C1  0477               	iorwf	red_arrow@i+1,w
   535  07C2  1903               	btfsc	3,2
   536  07C3  2FC5               	goto	u151
   537  07C4  2FC6               	goto	u150
   538  07C5                     u151:
   539  07C5  2FCD               	goto	l795
   540  07C6                     u150:
   541  07C6                     l793:
   542  07C6  3006               	movlw	6
   543  07C7  0676               	xorwf	red_arrow@i,w
   544  07C8  0477               	iorwf	red_arrow@i+1,w
   545  07C9  1D03               	btfss	3,2
   546  07CA  2FCC               	goto	u161
   547  07CB  2FCD               	goto	u160
   548  07CC                     u161:
   549  07CC  2FD2               	goto	l797
   550  07CD                     u160:
   551  07CD                     l795:
   552                           
   553                           ;Main.c: 302:             col = 60;
   554  07CD  303C               	movlw	60
   555  07CE  00F2               	movwf	??_red_arrow
   556  07CF  0872               	movf	??_red_arrow,w
   557  07D0  00F4               	movwf	red_arrow@col
   558                           
   559                           ;Main.c: 303:         } else if (i == 5) {
   560  07D1  2FE2               	goto	l803
   561  07D2                     l797:
   562  07D2  3005               	movlw	5
   563  07D3  0676               	xorwf	red_arrow@i,w
   564  07D4  0477               	iorwf	red_arrow@i+1,w
   565  07D5  1D03               	btfss	3,2
   566  07D6  2FD8               	goto	u171
   567  07D7  2FD9               	goto	u170
   568  07D8                     u171:
   569  07D8  2FDE               	goto	l801
   570  07D9                     u170:
   571  07D9                     l799:
   572                           
   573                           ;Main.c: 305:             col = 126;
   574  07D9  307E               	movlw	126
   575  07DA  00F2               	movwf	??_red_arrow
   576  07DB  0872               	movf	??_red_arrow,w
   577  07DC  00F4               	movwf	red_arrow@col
   578                           
   579                           ;Main.c: 306:         } else {
   580  07DD  2FE2               	goto	l803
   581  07DE                     l801:
   582                           
   583                           ;Main.c: 308:             col = 255;
   584  07DE  30FF               	movlw	255
   585  07DF  00F2               	movwf	??_red_arrow
   586  07E0  0872               	movf	??_red_arrow,w
   587  07E1  00F4               	movwf	red_arrow@col
   588  07E2                     l803:
   589                           
   590                           ;Main.c: 310:         input_data(col);
   591  07E2  0874               	movf	red_arrow@col,w
   592  07E3  118A  26B1  118A   	fcall	_input_data
   593  07E6                     l805:
   594                           
   595                           ;Main.c: 311:         latch_output();
   596  07E6  118A  2675  118A   	fcall	_latch_output
   597                           
   598                           ;Main.c: 313:     }
   599  07E9  3001               	movlw	1
   600  07EA  07F6               	addwf	red_arrow@i,f
   601  07EB  1803               	skipnc
   602  07EC  0AF7               	incf	red_arrow@i+1,f
   603  07ED  3000               	movlw	0
   604  07EE  07F7               	addwf	red_arrow@i+1,f
   605  07EF                     l807:
   606  07EF  0877               	movf	red_arrow@i+1,w
   607  07F0  3A80               	xorlw	128
   608  07F1  00FF               	movwf	btemp+1
   609  07F2  3080               	movlw	128
   610  07F3  027F               	subwf	btemp+1,w
   611  07F4  1D03               	skipz
   612  07F5  2FF8               	goto	u185
   613  07F6  3008               	movlw	8
   614  07F7  0276               	subwf	red_arrow@i,w
   615  07F8                     u185:
   616  07F8  1C03               	skipc
   617  07F9  2FFB               	goto	u181
   618  07FA  2FFC               	goto	u180
   619  07FB                     u181:
   620  07FB  2F85               	goto	l771
   621  07FC                     u180:
   622  07FC                     l97:
   623  07FC  0008               	return
   624  07FD                     __end_of_red_arrow:
   625                           
   626                           	psect	text2
   627  0653                     __ptext2:	
   628 ;; *************** function _initiate *****************
   629 ;; Defined at:
   630 ;;		line 44 in file "Main.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;		None
   633 ;; Auto vars:     Size  Location     Type
   634 ;;		None
   635 ;; Return value:  Size  Location     Type
   636 ;;                  1    wreg      void 
   637 ;; Registers used:
   638 ;;		wreg
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   644 ;;      Params:         0       0       0       0
   645 ;;      Locals:         0       0       0       0
   646 ;;      Temps:          0       0       0       0
   647 ;;      Totals:         0       0       0       0
   648 ;;Total ram usage:        0 bytes
   649 ;; Hardware stack levels used: 1
   650 ;; This function calls:
   651 ;;		Nothing
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           
   658                           ;psect for function _initiate
   659  0653                     _initiate:
   660  0653                     l761:	
   661                           ;incstack = 0
   662                           ; Regs used in _initiate: [wreg]
   663                           
   664                           
   665                           ;Main.c: 46:     TRISC = 0b00001111;
   666  0653  300F               	movlw	15
   667  0654  1683               	bsf	3,5	;RP0=1, select bank1
   668  0655  1303               	bcf	3,6	;RP1=0, select bank1
   669  0656  0087               	movwf	7	;volatile
   670                           
   671                           ;Main.c: 47:     TRISB = 0b01100000;
   672  0657  3060               	movlw	96
   673  0658  0086               	movwf	6	;volatile
   674                           
   675                           ;Main.c: 48:     OSCCON = 0b01110111;
   676  0659  3077               	movlw	119
   677  065A  008F               	movwf	15	;volatile
   678  065B                     l763:
   679                           
   680                           ;Main.c: 49:     PORTCbits.RC6 = 0;
   681  065B  1283               	bcf	3,5	;RP0=0, select bank0
   682  065C  1303               	bcf	3,6	;RP1=0, select bank0
   683  065D  1307               	bcf	7,6	;volatile
   684  065E                     l35:
   685  065E  0008               	return
   686  065F                     __end_of_initiate:
   687                           
   688                           	psect	text3
   689  070B                     __ptext3:	
   690 ;; *************** function _green_arrow *****************
   691 ;; Defined at:
   692 ;;		line 253 in file "Main.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;		None
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  row             1    5[COMMON] unsigned char 
   697 ;;  col             1    4[COMMON] unsigned char 
   698 ;;  i               2    6[COMMON] int 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   708 ;;      Params:         0       0       0       0
   709 ;;      Locals:         4       0       0       0
   710 ;;      Temps:          2       0       0       0
   711 ;;      Totals:         6       0       0       0
   712 ;;Total ram usage:        6 bytes
   713 ;; Hardware stack levels used: 1
   714 ;; Hardware stack levels required when called: 3
   715 ;; This function calls:
   716 ;;		_input_data
   717 ;;		_latch_output
   718 ;; This function is called by:
   719 ;;		_main
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           
   724                           ;psect for function _green_arrow
   725  070B                     _green_arrow:
   726  070B                     l809:	
   727                           ;incstack = 0
   728                           ; Regs used in _green_arrow: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   729                           
   730                           
   731                           ;Main.c: 254:     for (int i = 0; i < 8; i++) {
   732  070B  01F6               	clrf	green_arrow@i
   733  070C  01F7               	clrf	green_arrow@i+1
   734  070D                     l72:
   735                           
   736                           ;Main.c: 255:         unsigned char row = 0b00000001;
   737  070D  01F5               	clrf	green_arrow@row
   738  070E  0AF5               	incf	green_arrow@row,f
   739  070F                     l815:
   740  070F                     l817:
   741                           
   742                           ;Main.c: 258:         if (i != 0) {
   743  070F  0876               	movf	green_arrow@i,w
   744  0710  0477               	iorwf	green_arrow@i+1,w
   745  0711  1903               	btfsc	3,2
   746  0712  2F14               	goto	u191
   747  0713  2F15               	goto	u190
   748  0714                     u191:
   749  0714  2F22               	goto	l821
   750  0715                     u190:
   751  0715                     l819:
   752                           
   753                           ;Main.c: 259:             row = (row << i);
   754  0715  0875               	movf	green_arrow@row,w
   755  0716  00F2               	movwf	??_green_arrow
   756  0717  0A76               	incf	green_arrow@i,w
   757  0718  2F1B               	goto	u204
   758  0719                     u205:
   759  0719  1003               	clrc
   760  071A  0DF2               	rlf	??_green_arrow,f
   761  071B                     u204:
   762  071B  3EFF               	addlw	-1
   763  071C  1D03               	skipz
   764  071D  2F19               	goto	u205
   765  071E  0872               	movf	??_green_arrow,w
   766  071F  00F3               	movwf	??_green_arrow+1
   767  0720  0873               	movf	??_green_arrow+1,w
   768  0721  00F5               	movwf	green_arrow@row
   769  0722                     l821:
   770                           
   771                           ;Main.c: 262:         input_data(row);
   772  0722  0875               	movf	green_arrow@row,w
   773  0723  118A  26B1  118A   	fcall	_input_data
   774  0726                     l823:
   775                           
   776                           ;Main.c: 264:         if (i == 7) {
   777  0726  3007               	movlw	7
   778  0727  0676               	xorwf	green_arrow@i,w
   779  0728  0477               	iorwf	green_arrow@i+1,w
   780  0729  1D03               	btfss	3,2
   781  072A  2F2C               	goto	u211
   782  072B  2F2D               	goto	u210
   783  072C                     u211:
   784  072C  2F32               	goto	l827
   785  072D                     u210:
   786  072D                     l825:
   787                           
   788                           ;Main.c: 266:             col = 24;
   789  072D  3018               	movlw	24
   790  072E  00F2               	movwf	??_green_arrow
   791  072F  0872               	movf	??_green_arrow,w
   792  0730  00F4               	movwf	green_arrow@col
   793                           
   794                           ;Main.c: 267:         } else if (i == 0 || i == 1 || i == 2 || i == 3 || i == 6) {
   795  0731  2F68               	goto	l845
   796  0732                     l827:
   797  0732  0876               	movf	green_arrow@i,w
   798  0733  0477               	iorwf	green_arrow@i+1,w
   799  0734  1903               	btfsc	3,2
   800  0735  2F37               	goto	u221
   801  0736  2F38               	goto	u220
   802  0737                     u221:
   803  0737  2F53               	goto	l837
   804  0738                     u220:
   805  0738                     l829:
   806  0738  0376               	decf	green_arrow@i,w
   807  0739  0477               	iorwf	green_arrow@i+1,w
   808  073A  1903               	btfsc	3,2
   809  073B  2F3D               	goto	u231
   810  073C  2F3E               	goto	u230
   811  073D                     u231:
   812  073D  2F53               	goto	l837
   813  073E                     u230:
   814  073E                     l831:
   815  073E  3002               	movlw	2
   816  073F  0676               	xorwf	green_arrow@i,w
   817  0740  0477               	iorwf	green_arrow@i+1,w
   818  0741  1903               	btfsc	3,2
   819  0742  2F44               	goto	u241
   820  0743  2F45               	goto	u240
   821  0744                     u241:
   822  0744  2F53               	goto	l837
   823  0745                     u240:
   824  0745                     l833:
   825  0745  3003               	movlw	3
   826  0746  0676               	xorwf	green_arrow@i,w
   827  0747  0477               	iorwf	green_arrow@i+1,w
   828  0748  1903               	btfsc	3,2
   829  0749  2F4B               	goto	u251
   830  074A  2F4C               	goto	u250
   831  074B                     u251:
   832  074B  2F53               	goto	l837
   833  074C                     u250:
   834  074C                     l835:
   835  074C  3006               	movlw	6
   836  074D  0676               	xorwf	green_arrow@i,w
   837  074E  0477               	iorwf	green_arrow@i+1,w
   838  074F  1D03               	btfss	3,2
   839  0750  2F52               	goto	u261
   840  0751  2F53               	goto	u260
   841  0752                     u261:
   842  0752  2F58               	goto	l839
   843  0753                     u260:
   844  0753                     l837:
   845                           
   846                           ;Main.c: 269:             col = 60;
   847  0753  303C               	movlw	60
   848  0754  00F2               	movwf	??_green_arrow
   849  0755  0872               	movf	??_green_arrow,w
   850  0756  00F4               	movwf	green_arrow@col
   851                           
   852                           ;Main.c: 270:         } else if (i == 5) {
   853  0757  2F68               	goto	l845
   854  0758                     l839:
   855  0758  3005               	movlw	5
   856  0759  0676               	xorwf	green_arrow@i,w
   857  075A  0477               	iorwf	green_arrow@i+1,w
   858  075B  1D03               	btfss	3,2
   859  075C  2F5E               	goto	u271
   860  075D  2F5F               	goto	u270
   861  075E                     u271:
   862  075E  2F64               	goto	l843
   863  075F                     u270:
   864  075F                     l841:
   865                           
   866                           ;Main.c: 272:             col = 126;
   867  075F  307E               	movlw	126
   868  0760  00F2               	movwf	??_green_arrow
   869  0761  0872               	movf	??_green_arrow,w
   870  0762  00F4               	movwf	green_arrow@col
   871                           
   872                           ;Main.c: 273:         } else {
   873  0763  2F68               	goto	l845
   874  0764                     l843:
   875                           
   876                           ;Main.c: 275:             col = 255;
   877  0764  30FF               	movlw	255
   878  0765  00F2               	movwf	??_green_arrow
   879  0766  0872               	movf	??_green_arrow,w
   880  0767  00F4               	movwf	green_arrow@col
   881  0768                     l845:
   882                           
   883                           ;Main.c: 277:         input_data(col);
   884  0768  0874               	movf	green_arrow@col,w
   885  0769  118A  26B1  118A   	fcall	_input_data
   886  076C                     l847:
   887                           
   888                           ;Main.c: 278:         latch_output();
   889  076C  118A  2675  118A   	fcall	_latch_output
   890                           
   891                           ;Main.c: 280:     }
   892  076F  3001               	movlw	1
   893  0770  07F6               	addwf	green_arrow@i,f
   894  0771  1803               	skipnc
   895  0772  0AF7               	incf	green_arrow@i+1,f
   896  0773  3000               	movlw	0
   897  0774  07F7               	addwf	green_arrow@i+1,f
   898  0775                     l849:
   899  0775  0877               	movf	green_arrow@i+1,w
   900  0776  3A80               	xorlw	128
   901  0777  00FF               	movwf	btemp+1
   902  0778  3080               	movlw	128
   903  0779  027F               	subwf	btemp+1,w
   904  077A  1D03               	skipz
   905  077B  2F7E               	goto	u285
   906  077C  3008               	movlw	8
   907  077D  0276               	subwf	green_arrow@i,w
   908  077E                     u285:
   909  077E  1C03               	skipc
   910  077F  2F81               	goto	u281
   911  0780  2F82               	goto	u280
   912  0781                     u281:
   913  0781  2F0D               	goto	l72
   914  0782                     u280:
   915  0782                     l83:
   916  0782  0008               	return
   917  0783                     __end_of_green_arrow:
   918                           
   919                           	psect	text4
   920  0675                     __ptext4:	
   921 ;; *************** function _latch_output *****************
   922 ;; Defined at:
   923 ;;		line 227 in file "Main.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;		None
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   937 ;;      Params:         0       0       0       0
   938 ;;      Locals:         0       0       0       0
   939 ;;      Temps:          1       0       0       0
   940 ;;      Totals:         1       0       0       0
   941 ;;Total ram usage:        1 bytes
   942 ;; Hardware stack levels used: 1
   943 ;; This function calls:
   944 ;;		Nothing
   945 ;; This function is called by:
   946 ;;		_green_arrow
   947 ;;		_red_arrow
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           
   952                           ;psect for function _latch_output
   953  0675                     _latch_output:
   954  0675                     l753:	
   955                           ;incstack = 0
   956                           ; Regs used in _latch_output: [wreg]
   957                           
   958                           
   959                           ;Main.c: 228:     PORTCbits.RC4 = 0;
   960  0675  1283               	bcf	3,5	;RP0=0, select bank0
   961  0676  1303               	bcf	3,6	;RP1=0, select bank0
   962  0677  1207               	bcf	7,4	;volatile
   963  0678                     l755:
   964                           
   965                           ;Main.c: 229:     _delay((unsigned long)((5)*(8000000/4000000.0)));
   966  0678  3003               	movlw	3
   967  0679  00F0               	movwf	??_latch_output
   968  067A                     u317:
   969  067A  0BF0               	decfsz	??_latch_output,f
   970  067B  2E7A               	goto	u317
   971  067C                     l757:
   972                           
   973                           ;Main.c: 230:     PORTCbits.RC4 = 1;
   974  067C  1283               	bcf	3,5	;RP0=0, select bank0
   975  067D  1303               	bcf	3,6	;RP1=0, select bank0
   976  067E  1607               	bsf	7,4	;volatile
   977                           
   978                           ;Main.c: 232:     _delay((unsigned long)((5)*(8000000/4000000.0)));
   979  067F  3003               	movlw	3
   980  0680  00F0               	movwf	??_latch_output
   981  0681                     u327:
   982  0681  0BF0               	decfsz	??_latch_output,f
   983  0682  2E81               	goto	u327
   984  0683                     l759:
   985                           
   986                           ;Main.c: 233:     PORTCbits.RC4 = 0;
   987  0683  1283               	bcf	3,5	;RP0=0, select bank0
   988  0684  1303               	bcf	3,6	;RP1=0, select bank0
   989  0685  1207               	bcf	7,4	;volatile
   990                           
   991                           ;Main.c: 234:     _delay((unsigned long)((5)*(8000000/4000000.0)));
   992  0686  3003               	movlw	3
   993  0687  00F0               	movwf	??_latch_output
   994  0688                     u337:
   995  0688  0BF0               	decfsz	??_latch_output,f
   996  0689  2E88               	goto	u337
   997  068A                     l69:
   998  068A  0008               	return
   999  068B                     __end_of_latch_output:
  1000                           
  1001                           	psect	text5
  1002  06B1                     __ptext5:	
  1003 ;; *************** function _input_data *****************
  1004 ;; Defined at:
  1005 ;;		line 119 in file "Main.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  num             1    wreg     unsigned char 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  num             1    1[COMMON] unsigned char 
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, status,2, status,0, pclath, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1019 ;;      Params:         0       0       0       0
  1020 ;;      Locals:         1       0       0       0
  1021 ;;      Temps:          0       0       0       0
  1022 ;;      Totals:         1       0       0       0
  1023 ;;Total ram usage:        1 bytes
  1024 ;; Hardware stack levels used: 1
  1025 ;; Hardware stack levels required when called: 2
  1026 ;; This function calls:
  1027 ;;		_input_high
  1028 ;;		_input_low
  1029 ;; This function is called by:
  1030 ;;		_green_arrow
  1031 ;;		_red_arrow
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           
  1036                           ;psect for function _input_data
  1037  06B1                     _input_data:
  1038                           
  1039                           ;incstack = 0
  1040                           ; Regs used in _input_data: [wreg+status,2+status,0+pclath+cstack]
  1041                           ;input_data@num stored from wreg
  1042  06B1  00F1               	movwf	input_data@num
  1043  06B2                     l705:
  1044                           
  1045                           ;Main.c: 126:     if ((num & 0x01) == 0x01) {
  1046  06B2  1C71               	btfss	input_data@num,0
  1047  06B3  2EB5               	goto	u11
  1048  06B4  2EB6               	goto	u10
  1049  06B5                     u11:
  1050  06B5  2EBA               	goto	l709
  1051  06B6                     u10:
  1052  06B6                     l707:
  1053                           
  1054                           ;Main.c: 129:         input_high();
  1055  06B6  118A  2645  118A   	fcall	_input_high
  1056                           
  1057                           ;Main.c: 131:     } else input_low();
  1058  06B9  2EBD               	goto	l711
  1059  06BA                     l709:
  1060  06BA  118A  264C  118A   	fcall	_input_low
  1061  06BD                     l711:
  1062                           
  1063                           ;Main.c: 135:     if ((num & 0x02) == 0x02) {
  1064  06BD  1CF1               	btfss	input_data@num,1
  1065  06BE  2EC0               	goto	u21
  1066  06BF  2EC1               	goto	u20
  1067  06C0                     u21:
  1068  06C0  2EC5               	goto	l715
  1069  06C1                     u20:
  1070  06C1                     l713:
  1071                           
  1072                           ;Main.c: 138:         input_high();
  1073  06C1  118A  2645  118A   	fcall	_input_high
  1074                           
  1075                           ;Main.c: 140:     } else input_low();
  1076  06C4  2EC8               	goto	l717
  1077  06C5                     l715:
  1078  06C5  118A  264C  118A   	fcall	_input_low
  1079  06C8                     l717:
  1080                           
  1081                           ;Main.c: 144:     if ((num & 0x04) == 0x04) {
  1082  06C8  1D71               	btfss	input_data@num,2
  1083  06C9  2ECB               	goto	u31
  1084  06CA  2ECC               	goto	u30
  1085  06CB                     u31:
  1086  06CB  2ED0               	goto	l721
  1087  06CC                     u30:
  1088  06CC                     l719:
  1089                           
  1090                           ;Main.c: 147:         input_high();
  1091  06CC  118A  2645  118A   	fcall	_input_high
  1092                           
  1093                           ;Main.c: 149:     } else input_low();
  1094  06CF  2ED3               	goto	l723
  1095  06D0                     l721:
  1096  06D0  118A  264C  118A   	fcall	_input_low
  1097  06D3                     l723:
  1098                           
  1099                           ;Main.c: 153:     if ((num & 0x08) == 0x08) {
  1100  06D3  1DF1               	btfss	input_data@num,3
  1101  06D4  2ED6               	goto	u41
  1102  06D5  2ED7               	goto	u40
  1103  06D6                     u41:
  1104  06D6  2EDB               	goto	l727
  1105  06D7                     u40:
  1106  06D7                     l725:
  1107                           
  1108                           ;Main.c: 156:         input_high();
  1109  06D7  118A  2645  118A   	fcall	_input_high
  1110                           
  1111                           ;Main.c: 158:     } else input_low();
  1112  06DA  2EDE               	goto	l729
  1113  06DB                     l727:
  1114  06DB  118A  264C  118A   	fcall	_input_low
  1115  06DE                     l729:
  1116                           
  1117                           ;Main.c: 162:     if ((num & 0x10) == 0x10) {
  1118  06DE  1E71               	btfss	input_data@num,4
  1119  06DF  2EE1               	goto	u51
  1120  06E0  2EE2               	goto	u50
  1121  06E1                     u51:
  1122  06E1  2EE6               	goto	l733
  1123  06E2                     u50:
  1124  06E2                     l731:
  1125                           
  1126                           ;Main.c: 165:         input_high();
  1127  06E2  118A  2645  118A   	fcall	_input_high
  1128                           
  1129                           ;Main.c: 167:     } else input_low();
  1130  06E5  2EE9               	goto	l735
  1131  06E6                     l733:
  1132  06E6  118A  264C  118A   	fcall	_input_low
  1133  06E9                     l735:
  1134                           
  1135                           ;Main.c: 171:     if ((num & 0x20) == 0x20) {
  1136  06E9  1EF1               	btfss	input_data@num,5
  1137  06EA  2EEC               	goto	u61
  1138  06EB  2EED               	goto	u60
  1139  06EC                     u61:
  1140  06EC  2EF1               	goto	l739
  1141  06ED                     u60:
  1142  06ED                     l737:
  1143                           
  1144                           ;Main.c: 174:         input_high();
  1145  06ED  118A  2645  118A   	fcall	_input_high
  1146                           
  1147                           ;Main.c: 176:     } else input_low();
  1148  06F0  2EF4               	goto	l741
  1149  06F1                     l739:
  1150  06F1  118A  264C  118A   	fcall	_input_low
  1151  06F4                     l741:
  1152                           
  1153                           ;Main.c: 180:     if ((num & 0x40) == 0x40) {
  1154  06F4  1F71               	btfss	input_data@num,6
  1155  06F5  2EF7               	goto	u71
  1156  06F6  2EF8               	goto	u70
  1157  06F7                     u71:
  1158  06F7  2EFC               	goto	l745
  1159  06F8                     u70:
  1160  06F8                     l743:
  1161                           
  1162                           ;Main.c: 183:         input_high();
  1163  06F8  118A  2645  118A   	fcall	_input_high
  1164                           
  1165                           ;Main.c: 185:     } else input_low();
  1166  06FB  2EFF               	goto	l747
  1167  06FC                     l745:
  1168  06FC  118A  264C  118A   	fcall	_input_low
  1169  06FF                     l747:
  1170                           
  1171                           ;Main.c: 191:     if ((num & 0x80) == 0x80) {
  1172  06FF  1FF1               	btfss	input_data@num,7
  1173  0700  2F02               	goto	u81
  1174  0701  2F03               	goto	u80
  1175  0702                     u81:
  1176  0702  2F07               	goto	l751
  1177  0703                     u80:
  1178  0703                     l749:
  1179                           
  1180                           ;Main.c: 194:         input_high();
  1181  0703  118A  2645  118A   	fcall	_input_high
  1182                           
  1183                           ;Main.c: 196:     } else input_low();
  1184  0706  2F0A               	goto	l57
  1185  0707                     l751:
  1186  0707  118A  264C  118A   	fcall	_input_low
  1187  070A                     l57:
  1188  070A  0008               	return
  1189  070B                     __end_of_input_data:
  1190                           
  1191                           	psect	text6
  1192  064C                     __ptext6:	
  1193 ;; *************** function _input_low *****************
  1194 ;; Defined at:
  1195 ;;		line 210 in file "Main.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;		None
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		wreg, status,2, status,0, pclath, cstack
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1209 ;;      Params:         0       0       0       0
  1210 ;;      Locals:         0       0       0       0
  1211 ;;      Temps:          0       0       0       0
  1212 ;;      Totals:         0       0       0       0
  1213 ;;Total ram usage:        0 bytes
  1214 ;; Hardware stack levels used: 1
  1215 ;; Hardware stack levels required when called: 1
  1216 ;; This function calls:
  1217 ;;		_serial_clock_pulse
  1218 ;; This function is called by:
  1219 ;;		_input_data
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           
  1224                           ;psect for function _input_low
  1225  064C                     _input_low:
  1226  064C                     l701:	
  1227                           ;incstack = 0
  1228                           ; Regs used in _input_low: [wreg+status,2+status,0+pclath+cstack]
  1229                           
  1230                           
  1231                           ;Main.c: 212:     PORTBbits.RB4 = 0;
  1232  064C  1283               	bcf	3,5	;RP0=0, select bank0
  1233  064D  1303               	bcf	3,6	;RP1=0, select bank0
  1234  064E  1206               	bcf	6,4	;volatile
  1235  064F                     l703:
  1236                           
  1237                           ;Main.c: 213:     serial_clock_pulse();
  1238  064F  118A  265F  118A   	fcall	_serial_clock_pulse
  1239  0652                     l63:
  1240  0652  0008               	return
  1241  0653                     __end_of_input_low:
  1242                           
  1243                           	psect	text7
  1244  0645                     __ptext7:	
  1245 ;; *************** function _input_high *****************
  1246 ;; Defined at:
  1247 ;;		line 202 in file "Main.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0, pclath, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1261 ;;      Params:         0       0       0       0
  1262 ;;      Locals:         0       0       0       0
  1263 ;;      Temps:          0       0       0       0
  1264 ;;      Totals:         0       0       0       0
  1265 ;;Total ram usage:        0 bytes
  1266 ;; Hardware stack levels used: 1
  1267 ;; Hardware stack levels required when called: 1
  1268 ;; This function calls:
  1269 ;;		_serial_clock_pulse
  1270 ;; This function is called by:
  1271 ;;		_input_data
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           
  1276                           ;psect for function _input_high
  1277  0645                     _input_high:
  1278  0645                     l697:	
  1279                           ;incstack = 0
  1280                           ; Regs used in _input_high: [wreg+status,2+status,0+pclath+cstack]
  1281                           
  1282                           
  1283                           ;Main.c: 204:     PORTBbits.RB4 = 1;
  1284  0645  1283               	bcf	3,5	;RP0=0, select bank0
  1285  0646  1303               	bcf	3,6	;RP1=0, select bank0
  1286  0647  1606               	bsf	6,4	;volatile
  1287  0648                     l699:
  1288                           
  1289                           ;Main.c: 205:     serial_clock_pulse();
  1290  0648  118A  265F  118A   	fcall	_serial_clock_pulse
  1291  064B                     l60:
  1292  064B  0008               	return
  1293  064C                     __end_of_input_high:
  1294                           
  1295                           	psect	text8
  1296  065F                     __ptext8:	
  1297 ;; *************** function _serial_clock_pulse *****************
  1298 ;; Defined at:
  1299 ;;		line 218 in file "Main.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1313 ;;      Params:         0       0       0       0
  1314 ;;      Locals:         0       0       0       0
  1315 ;;      Temps:          1       0       0       0
  1316 ;;      Totals:         1       0       0       0
  1317 ;;Total ram usage:        1 bytes
  1318 ;; Hardware stack levels used: 1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_input_high
  1323 ;;		_input_low
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           
  1328                           ;psect for function _serial_clock_pulse
  1329  065F                     _serial_clock_pulse:
  1330  065F                     l689:	
  1331                           ;incstack = 0
  1332                           ; Regs used in _serial_clock_pulse: [wreg]
  1333                           
  1334                           
  1335                           ;Main.c: 219:     PORTCbits.RC6 = 0;
  1336  065F  1283               	bcf	3,5	;RP0=0, select bank0
  1337  0660  1303               	bcf	3,6	;RP1=0, select bank0
  1338  0661  1307               	bcf	7,6	;volatile
  1339  0662                     l691:
  1340                           
  1341                           ;Main.c: 220:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1342  0662  3003               	movlw	3
  1343  0663  00F0               	movwf	??_serial_clock_pulse
  1344  0664                     u347:
  1345  0664  0BF0               	decfsz	??_serial_clock_pulse,f
  1346  0665  2E64               	goto	u347
  1347  0666                     l693:
  1348                           
  1349                           ;Main.c: 221:     PORTCbits.RC6 = 1;
  1350  0666  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0667  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0668  1707               	bsf	7,6	;volatile
  1353                           
  1354                           ;Main.c: 222:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1355  0669  3003               	movlw	3
  1356  066A  00F0               	movwf	??_serial_clock_pulse
  1357  066B                     u357:
  1358  066B  0BF0               	decfsz	??_serial_clock_pulse,f
  1359  066C  2E6B               	goto	u357
  1360  066D                     l695:
  1361                           
  1362                           ;Main.c: 223:     PORTCbits.RC6 = 0;
  1363  066D  1283               	bcf	3,5	;RP0=0, select bank0
  1364  066E  1303               	bcf	3,6	;RP1=0, select bank0
  1365  066F  1307               	bcf	7,6	;volatile
  1366                           
  1367                           ;Main.c: 224:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1368  0670  3003               	movlw	3
  1369  0671  00F0               	movwf	??_serial_clock_pulse
  1370  0672                     u367:
  1371  0672  0BF0               	decfsz	??_serial_clock_pulse,f
  1372  0673  2E72               	goto	u367
  1373  0674                     l66:
  1374  0674  0008               	return
  1375  0675                     __end_of_serial_clock_pulse:
  1376  007E                     btemp	set	126	;btemp
  1377  007E                     wtemp0	set	126
  1378                           
  1379                           	psect	config
  1380                           
  1381                           ;Config register CONFIG @ 0x2007
  1382                           ;	Oscillator Selection bits
  1383                           ;	FOSC = INTRCCLK, INTOSC oscillator: CLKOUT function on RA4/OSC2/CLKOUT pin, I/O functi
      +                          on on RA5/OSC1/CLKIN
  1384                           ;	Watchdog Timer Enable bit
  1385                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1386                           ;	Power-up Timer Enable bit
  1387                           ;	PWRTE = OFF, PWRT disabled
  1388                           ;	MCLR Pin Function Select bit
  1389                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  1390                           ;	Code Protection bit
  1391                           ;	CP = OFF, Program memory code protection is disabled
  1392                           ;	Data Code Protection bit
  1393                           ;	CPD = OFF, Data memory code protection is disabled
  1394                           ;	Brown-out Reset Selection bits
  1395                           ;	BOREN = OFF, BOR disabled
  1396                           ;	Internal External Switchover bit
  1397                           ;	IESO = OFF, Internal External Switchover mode is disabled
  1398                           ;	Fail-Safe Clock Monitor Enabled bit
  1399                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1400  2007                     	org	8199
  1401  2007  38D5               	dw	14549

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_green_arrow
    _main->_red_arrow
    _red_arrow->_input_data
    _green_arrow->_input_data
    _input_low->_serial_clock_pulse
    _input_high->_serial_clock_pulse

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     660
                                              8 COMMON     3     3      0
                        _green_arrow
                           _initiate
                          _red_arrow
 ---------------------------------------------------------------------------------
 (1) _red_arrow                                            6     6      0     330
                                              2 COMMON     6     6      0
                         _input_data
                       _latch_output
 ---------------------------------------------------------------------------------
 (1) _initiate                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _green_arrow                                          6     6      0     330
                                              2 COMMON     6     6      0
                         _input_data
                       _latch_output
 ---------------------------------------------------------------------------------
 (2) _latch_output                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _input_data                                           1     1      0     120
                                              1 COMMON     1     1      0
                         _input_high
                          _input_low
 ---------------------------------------------------------------------------------
 (3) _input_low                                            0     0      0       0
                 _serial_clock_pulse
 ---------------------------------------------------------------------------------
 (3) _input_high                                           0     0      0       0
                 _serial_clock_pulse
 ---------------------------------------------------------------------------------
 (4) _serial_clock_pulse                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _green_arrow
     _input_data
       _input_high
         _serial_clock_pulse
       _input_low
         _serial_clock_pulse
     _latch_output
   _initiate
   _red_arrow
     _input_data
     _latch_output

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Jun 24 11:58:44 2022

__size_of_serial_clock_pulse 0016                           l35 065E                           l60 064B  
                         l63 0652                           l72 070D                           l57 070A  
                         l66 0674                           l83 0782                           l69 068A  
                         l97 07FC                           u10 06B6                           u11 06B5  
                         u20 06C1                           u21 06C0                           u30 06CC  
                         u31 06CB                           u40 06D7                           u41 06D6  
                         u50 06E2                           u51 06E1                           u60 06ED  
                         u61 06EC                           u70 06F8                           u71 06F7  
                         u80 0703                           u81 0702                           u90 078F  
                         u91 078E                          l701 064C                          l703 064F  
                        l711 06BD                          l721 06D0                          l713 06C1  
                        l705 06B2                          l801 07DE                          l731 06E2  
                        l723 06D3                          l715 06C5                          l707 06B6  
                        l803 07E2                          l741 06F4                          l733 06E6  
                        l725 06D7                          l717 06C8                          l709 06BA  
                        l821 0722                          l805 07E6                          l751 0707  
                        l743 06F8                          l735 06E9                          l727 06DB  
                        l719 06CC                          l831 073E                          l823 0726  
                        l815 070F                          l807 07EF                          l745 06FC  
                        l737 06ED                          l729 06DE                          l753 0675  
                        l841 075F                          l833 0745                          l825 072D  
                        l817 070F                          l809 070B                          l761 0653  
                        l691 0662                          l747 06FF                          l739 06F1  
                        l755 0678                          l843 0764                          l835 074C  
                        l827 0732                          l819 0715                          l763 065B  
                        l771 0785                          l851 068B                          l693 0666  
                        l749 0703                          l757 067C                          l829 0738  
                        l837 0753                          l845 0768                          l781 07A0  
                        l773 0789                          l765 0783                          l853 068E  
                        l695 066D                          l759 0683                          l847 076C  
                        l839 0758                          l791 07BF                          l783 07A7  
                        l775 0789                          l855 0691                          l689 065F  
                        l697 0645                          l849 0775                          l793 07C6  
                        l785 07AC                          l777 078F                          l857 069E  
                        l699 0648                          l787 07B2                          l795 07CD  
                        l779 079C                          l859 06A1                          l797 07D2  
                        l789 07B8                          l799 07D9                          u110 07A7  
                        u111 07A6                          u120 07B2                          u104 0795  
                        u121 07B1                          u105 0793                          u210 072D  
                        u130 07B8                          u211 072C                          u131 07B7  
                        u220 0738                          u204 071B                          u140 07BF  
                        u221 0737                          u205 0719                          u141 07BE  
                        u230 073E                          u150 07C6                          u231 073D  
                        u151 07C5                          u240 0745                          u160 07CD  
                        u241 0744                          u161 07CC                          u250 074C  
                        u170 07D9                          u251 074B                          u171 07D8  
                        u307 06A7                          u260 0753                          u180 07FC  
                        u317 067A                          u261 0752                          u181 07FB  
                        u270 075F                          u190 0715                          u327 0681  
                        u271 075E                          u191 0714                          u280 0782  
                        u337 0688                          u281 0781                          u185 07F8  
                        u347 0664                          u357 066B                          u285 077E  
                        u367 0672                          u297 0697                         _main 068B  
               ?_green_arrow 0070                         btemp 007E                         start 0000  
                      ?_main 0070                        _TRISB 0086                        _TRISC 0087  
              ?_latch_output 0070                        status 0003                        wtemp0 007E  
            __initialization 07FD                 __end_of_main 06B1               green_arrow@col 0074  
             green_arrow@row 0075                       ??_main 0078               ??_latch_output 0070  
                     _OSCCON 008F             __end_of_initiate 065F                input_data@num 0071  
    __end_of__initialization 07FD         __size_of_green_arrow 0078               __pcstackCOMMON 0070  
               green_arrow@i 0076   __end_of_serial_clock_pulse 0675           __size_of_red_arrow 007A  
                 __pmaintext 068B         __end_of_latch_output 068B           __size_of_input_low 0007  
                  ?_initiate 0070                      __ptext1 0783                      __ptext2 0653  
                    __ptext3 070B                      __ptext4 0675                      __ptext5 06B1  
                    __ptext6 064C                      __ptext7 0645                      __ptext8 065F  
          __end_of_red_arrow 07FD                   _input_data 06B1                   _input_high 0645  
          __end_of_input_low 0653         end_of_initialization 07FD                   ??_initiate 0070  
                  _PORTBbits 0006                    _PORTCbits 0007                 red_arrow@col 0074  
               red_arrow@row 0075        __size_of_latch_output 0016          start_initialization 07FD  
                ?_input_data 0070                  ?_input_high 0070                 _latch_output 0675  
              ??_green_arrow 0072           _serial_clock_pulse 065F                   red_arrow@i 0076  
                  ___latbits 0001          ?_serial_clock_pulse 0070            __size_of_initiate 000C  
       ??_serial_clock_pulse 0070          __end_of_green_arrow 0783          __size_of_input_data 005A  
        __size_of_input_high 0007                    _red_arrow 0783                    _input_low 064C  
                 ?_red_arrow 0070                   ?_input_low 0070                  _green_arrow 070B  
               ??_input_data 0071                 ??_input_high 0071                __size_of_main 0026  
                   _initiate 0653           __end_of_input_data 070B           __end_of_input_high 064C  
                ??_red_arrow 0072                  ??_input_low 0071  
