

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Jun 19 13:15:16 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F690
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F690 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  008F                     	;# 
    89  0090                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0093                     	;# 
    93  0093                     	;# 
    94  0094                     	;# 
    95  0095                     	;# 
    96  0095                     	;# 
    97  0096                     	;# 
    98  0096                     	;# 
    99  0097                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009B                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  0115                     	;# 
   112  0116                     	;# 
   113  0118                     	;# 
   114  0119                     	;# 
   115  011A                     	;# 
   116  011B                     	;# 
   117  011E                     	;# 
   118  011F                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  019D                     	;# 
   122  019E                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  008F                     	;# 
   162  0090                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0093                     	;# 
   166  0093                     	;# 
   167  0094                     	;# 
   168  0095                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0096                     	;# 
   172  0097                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009E                     	;# 
   178  009F                     	;# 
   179  010C                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  010F                     	;# 
   184  0115                     	;# 
   185  0116                     	;# 
   186  0118                     	;# 
   187  0119                     	;# 
   188  011A                     	;# 
   189  011B                     	;# 
   190  011E                     	;# 
   191  011F                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194  019D                     	;# 
   195  019E                     	;# 
   196  0006                     _PORTBbits	set	6
   197  0007                     _PORTCbits	set	7
   198  008F                     _OSCCON	set	143
   199  0086                     _TRISB	set	134
   200  0087                     _TRISC	set	135
   201                           
   202                           	psect	cinit
   203  07FD                     start_initialization:	
   204                           ; #config settings
   205                           
   206  07FD                     __initialization:
   207  07FD                     end_of_initialization:	
   208                           ;End of C runtime variable initialization code
   209                           
   210  07FD                     __end_of__initialization:
   211  07FD  0183               	clrf	3
   212  07FE  118A  2F43         	ljmp	_main	;jump to C main() function
   213                           
   214                           	psect	cstackCOMMON
   215  0070                     __pcstackCOMMON:
   216  0070                     ?_initiate:
   217  0070                     ??_initiate:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_input_data:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_input_high:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_input_low:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_latch_output:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ??_latch_output:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_serial_clock_pulse:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ??_serial_clock_pulse:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_main:	
   242                           ; 1 bytes @ 0x0
   243                           
   244                           
   245                           ; 1 bytes @ 0x0
   246  0070                     	ds	3
   247  0073                     ??_input_data:
   248  0073                     ??_input_high:	
   249                           ; 1 bytes @ 0x3
   250                           
   251  0073                     ??_input_low:	
   252                           ; 1 bytes @ 0x3
   253                           
   254  0073                     input_data@num:	
   255                           ; 1 bytes @ 0x3
   256                           
   257                           
   258                           ; 1 bytes @ 0x3
   259  0073                     	ds	1
   260  0074                     ??_main:
   261                           
   262                           ; 1 bytes @ 0x4
   263  0074                     	ds	3
   264  0077                     main@i:
   265                           
   266                           ; 2 bytes @ 0x7
   267  0077                     	ds	2
   268                           
   269                           	psect	maintext
   270  0743                     __pmaintext:	
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 32 in file "Main.c"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;  i               2    7[COMMON] int 
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : B00/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   290 ;;      Params:         0       0       0       0
   291 ;;      Locals:         2       0       0       0
   292 ;;      Temps:          3       0       0       0
   293 ;;      Totals:         5       0       0       0
   294 ;;Total ram usage:        5 bytes
   295 ;; Hardware stack levels required when called: 3
   296 ;; This function calls:
   297 ;;		_initiate
   298 ;;		_input_data
   299 ;; This function is called by:
   300 ;;		Startup code after reset
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           
   305                           ;psect for function _main
   306  0743                     _main:
   307  0743                     l739:	
   308                           ;incstack = 0
   309                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   310                           
   311                           
   312                           ;Main.c: 33:     initiate();
   313  0743  118A  270E  118A   	fcall	_initiate
   314  0746                     l741:
   315                           
   316                           ;Main.c: 35:         for( int i = 0; i < 255 ; i++)
   317  0746  01F7               	clrf	main@i
   318  0747  01F8               	clrf	main@i+1
   319  0748                     l747:
   320                           
   321                           ;Main.c: 36:         {;Main.c: 38:         input_data(i);
   322  0748  0877               	movf	main@i,w
   323  0749  118A  27A0  118A   	fcall	_input_data
   324  074C                     l749:
   325                           
   326                           ;Main.c: 39:         _delay((unsigned long)((500)*(8000000/4000.0)));
   327  074C  3006               	movlw	6
   328  074D  00F6               	movwf	??_main+2
   329  074E  3013               	movlw	19
   330  074F  00F5               	movwf	??_main+1
   331  0750  30AD               	movlw	173
   332  0751  00F4               	movwf	??_main
   333  0752                     u107:
   334  0752  0BF4               	decfsz	??_main,f
   335  0753  2F52               	goto	u107
   336  0754  0BF5               	decfsz	??_main+1,f
   337  0755  2F52               	goto	u107
   338  0756  0BF6               	decfsz	??_main+2,f
   339  0757  2F52               	goto	u107
   340  0758  2F59               	nop2
   341  0759                     l751:
   342                           
   343                           ;Main.c: 40:         }
   344  0759  3001               	movlw	1
   345  075A  07F7               	addwf	main@i,f
   346  075B  1803               	skipnc
   347  075C  0AF8               	incf	main@i+1,f
   348  075D  3000               	movlw	0
   349  075E  07F8               	addwf	main@i+1,f
   350  075F                     l753:
   351  075F  0878               	movf	main@i+1,w
   352  0760  3A80               	xorlw	128
   353  0761  00FF               	movwf	btemp+1
   354  0762  3080               	movlw	128
   355  0763  027F               	subwf	btemp+1,w
   356  0764  1D03               	skipz
   357  0765  2F68               	goto	u95
   358  0766  30FF               	movlw	255
   359  0767  0277               	subwf	main@i,w
   360  0768                     u95:
   361  0768  1C03               	skipc
   362  0769  2F6B               	goto	u91
   363  076A  2F6C               	goto	u90
   364  076B                     u91:
   365  076B  2F48               	goto	l747
   366  076C                     u90:
   367  076C  2F46               	goto	l741
   368  076D  118A  2800         	ljmp	start
   369  076F                     __end_of_main:
   370                           
   371                           	psect	text1
   372  07A0                     __ptext1:	
   373 ;; *************** function _input_data *****************
   374 ;; Defined at:
   375 ;;		line 120 in file "Main.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;  num             1    wreg     unsigned char 
   378 ;; Auto vars:     Size  Location     Type
   379 ;;  num             1    3[COMMON] unsigned char 
   380 ;; Return value:  Size  Location     Type
   381 ;;                  1    wreg      void 
   382 ;; Registers used:
   383 ;;		wreg, status,2, status,0, pclath, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   389 ;;      Params:         0       0       0       0
   390 ;;      Locals:         1       0       0       0
   391 ;;      Temps:          0       0       0       0
   392 ;;      Totals:         1       0       0       0
   393 ;;Total ram usage:        1 bytes
   394 ;; Hardware stack levels used: 1
   395 ;; Hardware stack levels required when called: 2
   396 ;; This function calls:
   397 ;;		_input_high
   398 ;;		_input_low
   399 ;;		_latch_output
   400 ;; This function is called by:
   401 ;;		_main
   402 ;; This function uses a non-reentrant model
   403 ;;
   404                           
   405                           
   406                           ;psect for function _input_data
   407  07A0                     _input_data:
   408                           
   409                           ;incstack = 0
   410                           ; Regs used in _input_data: [wreg+status,2+status,0+pclath+cstack]
   411                           ;input_data@num stored from wreg
   412  07A0  00F3               	movwf	input_data@num
   413  07A1                     l691:
   414                           
   415                           ;Main.c: 127:     if ((num & 0x01) == 0x01) {
   416  07A1  1C73               	btfss	input_data@num,0
   417  07A2  2FA4               	goto	u11
   418  07A3  2FA5               	goto	u10
   419  07A4                     u11:
   420  07A4  2FA9               	goto	l695
   421  07A5                     u10:
   422  07A5                     l693:
   423                           
   424                           ;Main.c: 130:         input_high();
   425  07A5  118A  2700  118A   	fcall	_input_high
   426                           
   427                           ;Main.c: 132:     } else input_low();
   428  07A8  2FAC               	goto	l697
   429  07A9                     l695:
   430  07A9  118A  2707  118A   	fcall	_input_low
   431  07AC                     l697:
   432                           
   433                           ;Main.c: 136:     if ((num & 0x02) == 0x02) {
   434  07AC  1CF3               	btfss	input_data@num,1
   435  07AD  2FAF               	goto	u21
   436  07AE  2FB0               	goto	u20
   437  07AF                     u21:
   438  07AF  2FB4               	goto	l701
   439  07B0                     u20:
   440  07B0                     l699:
   441                           
   442                           ;Main.c: 139:         input_high();
   443  07B0  118A  2700  118A   	fcall	_input_high
   444                           
   445                           ;Main.c: 141:     } else input_low();
   446  07B3  2FB7               	goto	l703
   447  07B4                     l701:
   448  07B4  118A  2707  118A   	fcall	_input_low
   449  07B7                     l703:
   450                           
   451                           ;Main.c: 145:     if ((num & 0x04) == 0x04) {
   452  07B7  1D73               	btfss	input_data@num,2
   453  07B8  2FBA               	goto	u31
   454  07B9  2FBB               	goto	u30
   455  07BA                     u31:
   456  07BA  2FBF               	goto	l707
   457  07BB                     u30:
   458  07BB                     l705:
   459                           
   460                           ;Main.c: 148:         input_high();
   461  07BB  118A  2700  118A   	fcall	_input_high
   462                           
   463                           ;Main.c: 150:     } else input_low();
   464  07BE  2FC2               	goto	l709
   465  07BF                     l707:
   466  07BF  118A  2707  118A   	fcall	_input_low
   467  07C2                     l709:
   468                           
   469                           ;Main.c: 154:     if ((num & 0x08) == 0x08) {
   470  07C2  1DF3               	btfss	input_data@num,3
   471  07C3  2FC5               	goto	u41
   472  07C4  2FC6               	goto	u40
   473  07C5                     u41:
   474  07C5  2FCA               	goto	l713
   475  07C6                     u40:
   476  07C6                     l711:
   477                           
   478                           ;Main.c: 157:         input_high();
   479  07C6  118A  2700  118A   	fcall	_input_high
   480                           
   481                           ;Main.c: 159:     } else input_low();
   482  07C9  2FCD               	goto	l715
   483  07CA                     l713:
   484  07CA  118A  2707  118A   	fcall	_input_low
   485  07CD                     l715:
   486                           
   487                           ;Main.c: 163:     if ((num & 0x10) == 0x10) {
   488  07CD  1E73               	btfss	input_data@num,4
   489  07CE  2FD0               	goto	u51
   490  07CF  2FD1               	goto	u50
   491  07D0                     u51:
   492  07D0  2FD5               	goto	l719
   493  07D1                     u50:
   494  07D1                     l717:
   495                           
   496                           ;Main.c: 166:         input_high();
   497  07D1  118A  2700  118A   	fcall	_input_high
   498                           
   499                           ;Main.c: 168:     } else input_low();
   500  07D4  2FD8               	goto	l721
   501  07D5                     l719:
   502  07D5  118A  2707  118A   	fcall	_input_low
   503  07D8                     l721:
   504                           
   505                           ;Main.c: 172:     if ((num & 0x20) == 0x20) {
   506  07D8  1EF3               	btfss	input_data@num,5
   507  07D9  2FDB               	goto	u61
   508  07DA  2FDC               	goto	u60
   509  07DB                     u61:
   510  07DB  2FE0               	goto	l725
   511  07DC                     u60:
   512  07DC                     l723:
   513                           
   514                           ;Main.c: 175:         input_high();
   515  07DC  118A  2700  118A   	fcall	_input_high
   516                           
   517                           ;Main.c: 177:     } else input_low();
   518  07DF  2FE3               	goto	l727
   519  07E0                     l725:
   520  07E0  118A  2707  118A   	fcall	_input_low
   521  07E3                     l727:
   522                           
   523                           ;Main.c: 181:     if ((num & 0x40) == 0x40) {
   524  07E3  1F73               	btfss	input_data@num,6
   525  07E4  2FE6               	goto	u71
   526  07E5  2FE7               	goto	u70
   527  07E6                     u71:
   528  07E6  2FEB               	goto	l731
   529  07E7                     u70:
   530  07E7                     l729:
   531                           
   532                           ;Main.c: 184:         input_high();
   533  07E7  118A  2700  118A   	fcall	_input_high
   534                           
   535                           ;Main.c: 186:     } else input_low();
   536  07EA  2FEE               	goto	l733
   537  07EB                     l731:
   538  07EB  118A  2707  118A   	fcall	_input_low
   539  07EE                     l733:
   540                           
   541                           ;Main.c: 192:     if ((num & 0x80) == 0x80) {
   542  07EE  1FF3               	btfss	input_data@num,7
   543  07EF  2FF1               	goto	u81
   544  07F0  2FF2               	goto	u80
   545  07F1                     u81:
   546  07F1  2FF6               	goto	l737
   547  07F2                     u80:
   548  07F2                     l735:
   549                           
   550                           ;Main.c: 195:         input_high();
   551  07F2  118A  2700  118A   	fcall	_input_high
   552                           
   553                           ;Main.c: 197:     } else input_low();
   554  07F5  2FF9               	goto	l58
   555  07F6                     l737:
   556  07F6  118A  2707  118A   	fcall	_input_low
   557  07F9                     l58:
   558                           
   559                           ;Main.c: 200:     latch_output();
   560  07F9  118A  271A  118A   	fcall	_latch_output
   561  07FC                     l59:
   562  07FC  0008               	return
   563  07FD                     __end_of_input_data:
   564                           
   565                           	psect	text2
   566  071A                     __ptext2:	
   567 ;; *************** function _latch_output *****************
   568 ;; Defined at:
   569 ;;		line 228 in file "Main.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;		None
   572 ;; Auto vars:     Size  Location     Type
   573 ;;		None
   574 ;; Return value:  Size  Location     Type
   575 ;;                  1    wreg      void 
   576 ;; Registers used:
   577 ;;		wreg
   578 ;; Tracked objects:
   579 ;;		On entry : 0/0
   580 ;;		On exit  : 0/0
   581 ;;		Unchanged: 0/0
   582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   583 ;;      Params:         0       0       0       0
   584 ;;      Locals:         0       0       0       0
   585 ;;      Temps:          3       0       0       0
   586 ;;      Totals:         3       0       0       0
   587 ;;Total ram usage:        3 bytes
   588 ;; Hardware stack levels used: 1
   589 ;; This function calls:
   590 ;;		Nothing
   591 ;; This function is called by:
   592 ;;		_input_data
   593 ;; This function uses a non-reentrant model
   594 ;;
   595                           
   596                           
   597                           ;psect for function _latch_output
   598  071A                     _latch_output:
   599  071A                     l679:	
   600                           ;incstack = 0
   601                           ; Regs used in _latch_output: [wreg]
   602                           
   603                           
   604                           ;Main.c: 229:     PORTCbits.RC4 = 0;
   605  071A  1283               	bcf	3,5	;RP0=0, select bank0
   606  071B  1303               	bcf	3,6	;RP1=0, select bank0
   607  071C  1207               	bcf	7,4	;volatile
   608  071D                     l681:
   609                           
   610                           ;Main.c: 230:     _delay((unsigned long)((5)*(8000000/4000.0)));
   611  071D  300D               	movlw	13
   612  071E  00F1               	movwf	??_latch_output+1
   613  071F  30FB               	movlw	251
   614  0720  00F0               	movwf	??_latch_output
   615  0721                     u117:
   616  0721  0BF0               	decfsz	??_latch_output,f
   617  0722  2F21               	goto	u117
   618  0723  0BF1               	decfsz	??_latch_output+1,f
   619  0724  2F21               	goto	u117
   620  0725  2F26               	nop2
   621  0726                     l683:
   622                           
   623                           ;Main.c: 231:     PORTCbits.RC4 = 1;
   624  0726  1283               	bcf	3,5	;RP0=0, select bank0
   625  0727  1303               	bcf	3,6	;RP1=0, select bank0
   626  0728  1607               	bsf	7,4	;volatile
   627                           
   628                           ;Main.c: 232:     _delay((unsigned long)((500)*(8000000/4000.0)));
   629  0729  3006               	movlw	6
   630  072A  00F2               	movwf	??_latch_output+2
   631  072B  3013               	movlw	19
   632  072C  00F1               	movwf	??_latch_output+1
   633  072D  30AD               	movlw	173
   634  072E  00F0               	movwf	??_latch_output
   635  072F                     u127:
   636  072F  0BF0               	decfsz	??_latch_output,f
   637  0730  2F2F               	goto	u127
   638  0731  0BF1               	decfsz	??_latch_output+1,f
   639  0732  2F2F               	goto	u127
   640  0733  0BF2               	decfsz	??_latch_output+2,f
   641  0734  2F2F               	goto	u127
   642  0735  2F36               	nop2
   643  0736                     l685:
   644                           
   645                           ;Main.c: 233:     PORTCbits.RC4 = 0;
   646  0736  1283               	bcf	3,5	;RP0=0, select bank0
   647  0737  1303               	bcf	3,6	;RP1=0, select bank0
   648  0738  1207               	bcf	7,4	;volatile
   649                           
   650                           ;Main.c: 234:     _delay((unsigned long)((5)*(8000000/4000.0)));
   651  0739  300D               	movlw	13
   652  073A  00F1               	movwf	??_latch_output+1
   653  073B  30FB               	movlw	251
   654  073C  00F0               	movwf	??_latch_output
   655  073D                     u137:
   656  073D  0BF0               	decfsz	??_latch_output,f
   657  073E  2F3D               	goto	u137
   658  073F  0BF1               	decfsz	??_latch_output+1,f
   659  0740  2F3D               	goto	u137
   660  0741  2F42               	nop2
   661  0742                     l71:
   662  0742  0008               	return
   663  0743                     __end_of_latch_output:
   664                           
   665                           	psect	text3
   666  0707                     __ptext3:	
   667 ;; *************** function _input_low *****************
   668 ;; Defined at:
   669 ;;		line 211 in file "Main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;		None
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, status,2, status,0, pclath, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   683 ;;      Params:         0       0       0       0
   684 ;;      Locals:         0       0       0       0
   685 ;;      Temps:          0       0       0       0
   686 ;;      Totals:         0       0       0       0
   687 ;;Total ram usage:        0 bytes
   688 ;; Hardware stack levels used: 1
   689 ;; Hardware stack levels required when called: 1
   690 ;; This function calls:
   691 ;;		_serial_clock_pulse
   692 ;; This function is called by:
   693 ;;		_input_data
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           
   698                           ;psect for function _input_low
   699  0707                     _input_low:
   700  0707                     l675:	
   701                           ;incstack = 0
   702                           ; Regs used in _input_low: [wreg+status,2+status,0+pclath+cstack]
   703                           
   704                           
   705                           ;Main.c: 213:     PORTBbits.RB4 = 0;
   706  0707  1283               	bcf	3,5	;RP0=0, select bank0
   707  0708  1303               	bcf	3,6	;RP1=0, select bank0
   708  0709  1206               	bcf	6,4	;volatile
   709  070A                     l677:
   710                           
   711                           ;Main.c: 214:     serial_clock_pulse();
   712  070A  118A  276F  118A   	fcall	_serial_clock_pulse
   713  070D                     l65:
   714  070D  0008               	return
   715  070E                     __end_of_input_low:
   716                           
   717                           	psect	text4
   718  0700                     __ptext4:	
   719 ;; *************** function _input_high *****************
   720 ;; Defined at:
   721 ;;		line 203 in file "Main.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;		None
   724 ;; Auto vars:     Size  Location     Type
   725 ;;		None
   726 ;; Return value:  Size  Location     Type
   727 ;;                  1    wreg      void 
   728 ;; Registers used:
   729 ;;		wreg, status,2, status,0, pclath, cstack
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   735 ;;      Params:         0       0       0       0
   736 ;;      Locals:         0       0       0       0
   737 ;;      Temps:          0       0       0       0
   738 ;;      Totals:         0       0       0       0
   739 ;;Total ram usage:        0 bytes
   740 ;; Hardware stack levels used: 1
   741 ;; Hardware stack levels required when called: 1
   742 ;; This function calls:
   743 ;;		_serial_clock_pulse
   744 ;; This function is called by:
   745 ;;		_input_data
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           
   750                           ;psect for function _input_high
   751  0700                     _input_high:
   752  0700                     l671:	
   753                           ;incstack = 0
   754                           ; Regs used in _input_high: [wreg+status,2+status,0+pclath+cstack]
   755                           
   756                           
   757                           ;Main.c: 205:     PORTBbits.RB4 = 1;
   758  0700  1283               	bcf	3,5	;RP0=0, select bank0
   759  0701  1303               	bcf	3,6	;RP1=0, select bank0
   760  0702  1606               	bsf	6,4	;volatile
   761  0703                     l673:
   762                           
   763                           ;Main.c: 206:     serial_clock_pulse();
   764  0703  118A  276F  118A   	fcall	_serial_clock_pulse
   765  0706                     l62:
   766  0706  0008               	return
   767  0707                     __end_of_input_high:
   768                           
   769                           	psect	text5
   770  076F                     __ptext5:	
   771 ;; *************** function _serial_clock_pulse *****************
   772 ;; Defined at:
   773 ;;		line 219 in file "Main.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   787 ;;      Params:         0       0       0       0
   788 ;;      Locals:         0       0       0       0
   789 ;;      Temps:          3       0       0       0
   790 ;;      Totals:         3       0       0       0
   791 ;;Total ram usage:        3 bytes
   792 ;; Hardware stack levels used: 1
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		_input_high
   797 ;;		_input_low
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           
   802                           ;psect for function _serial_clock_pulse
   803  076F                     _serial_clock_pulse:
   804  076F                     l663:	
   805                           ;incstack = 0
   806                           ; Regs used in _serial_clock_pulse: [wreg]
   807                           
   808                           
   809                           ;Main.c: 220:     PORTCbits.RC6 = 0;
   810  076F  1283               	bcf	3,5	;RP0=0, select bank0
   811  0770  1303               	bcf	3,6	;RP1=0, select bank0
   812  0771  1307               	bcf	7,6	;volatile
   813  0772                     l665:
   814                           
   815                           ;Main.c: 221:     _delay((unsigned long)((100)*(8000000/4000.0)));
   816  0772  3002               	movlw	2
   817  0773  00F2               	movwf	??_serial_clock_pulse+2
   818  0774  3004               	movlw	4
   819  0775  00F1               	movwf	??_serial_clock_pulse+1
   820  0776  30BA               	movlw	186
   821  0777  00F0               	movwf	??_serial_clock_pulse
   822  0778                     u147:
   823  0778  0BF0               	decfsz	??_serial_clock_pulse,f
   824  0779  2F78               	goto	u147
   825  077A  0BF1               	decfsz	??_serial_clock_pulse+1,f
   826  077B  2F78               	goto	u147
   827  077C  0BF2               	decfsz	??_serial_clock_pulse+2,f
   828  077D  2F78               	goto	u147
   829  077E  0000               	nop
   830  077F                     l667:
   831                           
   832                           ;Main.c: 222:     PORTCbits.RC6 = 1;
   833  077F  1283               	bcf	3,5	;RP0=0, select bank0
   834  0780  1303               	bcf	3,6	;RP1=0, select bank0
   835  0781  1707               	bsf	7,6	;volatile
   836                           
   837                           ;Main.c: 223:     _delay((unsigned long)((100)*(8000000/4000.0)));
   838  0782  3002               	movlw	2
   839  0783  00F2               	movwf	??_serial_clock_pulse+2
   840  0784  3004               	movlw	4
   841  0785  00F1               	movwf	??_serial_clock_pulse+1
   842  0786  30BA               	movlw	186
   843  0787  00F0               	movwf	??_serial_clock_pulse
   844  0788                     u157:
   845  0788  0BF0               	decfsz	??_serial_clock_pulse,f
   846  0789  2F88               	goto	u157
   847  078A  0BF1               	decfsz	??_serial_clock_pulse+1,f
   848  078B  2F88               	goto	u157
   849  078C  0BF2               	decfsz	??_serial_clock_pulse+2,f
   850  078D  2F88               	goto	u157
   851  078E  0000               	nop
   852  078F                     l669:
   853                           
   854                           ;Main.c: 224:     PORTCbits.RC6 = 0;
   855  078F  1283               	bcf	3,5	;RP0=0, select bank0
   856  0790  1303               	bcf	3,6	;RP1=0, select bank0
   857  0791  1307               	bcf	7,6	;volatile
   858                           
   859                           ;Main.c: 225:     _delay((unsigned long)((100)*(8000000/4000.0)));
   860  0792  3002               	movlw	2
   861  0793  00F2               	movwf	??_serial_clock_pulse+2
   862  0794  3004               	movlw	4
   863  0795  00F1               	movwf	??_serial_clock_pulse+1
   864  0796  30BA               	movlw	186
   865  0797  00F0               	movwf	??_serial_clock_pulse
   866  0798                     u167:
   867  0798  0BF0               	decfsz	??_serial_clock_pulse,f
   868  0799  2F98               	goto	u167
   869  079A  0BF1               	decfsz	??_serial_clock_pulse+1,f
   870  079B  2F98               	goto	u167
   871  079C  0BF2               	decfsz	??_serial_clock_pulse+2,f
   872  079D  2F98               	goto	u167
   873  079E  0000               	nop
   874  079F                     l68:
   875  079F  0008               	return
   876  07A0                     __end_of_serial_clock_pulse:
   877                           
   878                           	psect	text6
   879  070E                     __ptext6:	
   880 ;; *************** function _initiate *****************
   881 ;; Defined at:
   882 ;;		line 45 in file "Main.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;		None
   885 ;; Auto vars:     Size  Location     Type
   886 ;;		None
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   896 ;;      Params:         0       0       0       0
   897 ;;      Locals:         0       0       0       0
   898 ;;      Temps:          0       0       0       0
   899 ;;      Totals:         0       0       0       0
   900 ;;Total ram usage:        0 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; This function calls:
   903 ;;		Nothing
   904 ;; This function is called by:
   905 ;;		_main
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           
   910                           ;psect for function _initiate
   911  070E                     _initiate:
   912  070E                     l687:	
   913                           ;incstack = 0
   914                           ; Regs used in _initiate: [wreg]
   915                           
   916                           
   917                           ;Main.c: 47:     TRISC = 0b00001111;
   918  070E  300F               	movlw	15
   919  070F  1683               	bsf	3,5	;RP0=1, select bank1
   920  0710  1303               	bcf	3,6	;RP1=0, select bank1
   921  0711  0087               	movwf	7	;volatile
   922                           
   923                           ;Main.c: 48:     TRISB = 0b01100000;
   924  0712  3060               	movlw	96
   925  0713  0086               	movwf	6	;volatile
   926                           
   927                           ;Main.c: 49:     OSCCON = 0b01110111;
   928  0714  3077               	movlw	119
   929  0715  008F               	movwf	15	;volatile
   930  0716                     l689:
   931                           
   932                           ;Main.c: 50:     PORTCbits.RC6 = 0;
   933  0716  1283               	bcf	3,5	;RP0=0, select bank0
   934  0717  1303               	bcf	3,6	;RP1=0, select bank0
   935  0718  1307               	bcf	7,6	;volatile
   936  0719                     l37:
   937  0719  0008               	return
   938  071A                     __end_of_initiate:
   939  007E                     btemp	set	126	;btemp
   940  007E                     wtemp0	set	126
   941                           
   942                           	psect	config
   943                           
   944                           ;Config register CONFIG @ 0x2007
   945                           ;	Oscillator Selection bits
   946                           ;	FOSC = INTRCCLK, INTOSC oscillator: CLKOUT function on RA4/OSC2/CLKOUT pin, I/O functi
      +                          on on RA5/OSC1/CLKIN
   947                           ;	Watchdog Timer Enable bit
   948                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   949                           ;	Power-up Timer Enable bit
   950                           ;	PWRTE = OFF, PWRT disabled
   951                           ;	MCLR Pin Function Select bit
   952                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
   953                           ;	Code Protection bit
   954                           ;	CP = OFF, Program memory code protection is disabled
   955                           ;	Data Code Protection bit
   956                           ;	CPD = OFF, Data memory code protection is disabled
   957                           ;	Brown-out Reset Selection bits
   958                           ;	BOREN = OFF, BOR disabled
   959                           ;	Internal External Switchover bit
   960                           ;	IESO = OFF, Internal External Switchover mode is disabled
   961                           ;	Fail-Safe Clock Monitor Enabled bit
   962                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
   963  2007                     	org	8199
   964  2007  38D5               	dw	14549

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_input_data
    _input_data->_latch_output
    _input_low->_serial_clock_pulse
    _input_high->_serial_clock_pulse

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     165
                                              4 COMMON     5     5      0
                           _initiate
                         _input_data
 ---------------------------------------------------------------------------------
 (1) _input_data                                           1     1      0     120
                                              3 COMMON     1     1      0
                         _input_high
                          _input_low
                       _latch_output
 ---------------------------------------------------------------------------------
 (2) _latch_output                                         3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _input_low                                            0     0      0       0
                 _serial_clock_pulse
 ---------------------------------------------------------------------------------
 (2) _input_high                                           0     0      0       0
                 _serial_clock_pulse
 ---------------------------------------------------------------------------------
 (3) _serial_clock_pulse                                   3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initiate                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initiate
   _input_data
     _input_high
       _serial_clock_pulse
     _input_low
       _serial_clock_pulse
     _latch_output

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Jun 19 13:15:16 2022

__size_of_serial_clock_pulse 0031                           l37 0719                           l62 0706  
                         l71 0742                           l65 070D                           l58 07F9  
                         l59 07FC                           l68 079F                           u10 07A5  
                         u11 07A4                           u20 07B0                           u21 07AF  
                         u30 07BB                           u31 07BA                           u40 07C6  
                         u41 07C5                           u50 07D1                           u51 07D0  
                         u60 07DC                           u61 07DB                           u70 07E7  
                         u71 07E6                           u80 07F2                           u81 07F1  
                         u90 076C                           u91 076B                           u95 0768  
                        l701 07B4                          l711 07C6                          l703 07B7  
                        l721 07D8                          l713 07CA                          l705 07BB  
                        l731 07EB                          l723 07DC                          l715 07CD  
                        l707 07BF                          l733 07EE                          l725 07E0  
                        l717 07D1                          l709 07C2                          l741 0746  
                        l663 076F                          l671 0700                          l735 07F2  
                        l727 07E3                          l719 07D5                          l751 0759  
                        l665 0772                          l673 0703                          l681 071D  
                        l737 07F6                          l729 07E7                          l753 075F  
                        l667 077F                          l675 0707                          l683 0726  
                        l691 07A1                          l747 0748                          l739 0743  
                        l669 078F                          l677 070A                          l685 0736  
                        l693 07A5                          l749 074C                          l687 070E  
                        l679 071A                          l695 07A9                          l689 0716  
                        l697 07AC                          l699 07B0                          u107 0752  
                        u117 0721                          u127 072F                          u137 073D  
                        u147 0778                          u157 0788                          u167 0798  
                       _main 0743                         btemp 007E                         start 0000  
                      ?_main 0070                        _TRISB 0086                        _TRISC 0087  
              ?_latch_output 0070                        main@i 0077                        status 0003  
                      wtemp0 007E              __initialization 07FD                 __end_of_main 076F  
                     ??_main 0074               ??_latch_output 0070                       _OSCCON 008F  
           __end_of_initiate 071A                input_data@num 0073      __end_of__initialization 07FD  
             __pcstackCOMMON 0070   __end_of_serial_clock_pulse 07A0                   __pmaintext 0743  
       __end_of_latch_output 0743           __size_of_input_low 0007                    ?_initiate 0070  
                    __ptext1 07A0                      __ptext2 071A                      __ptext3 0707  
                    __ptext4 0700                      __ptext5 076F                      __ptext6 070E  
                 _input_data 07A0                   _input_high 0700            __end_of_input_low 070E  
       end_of_initialization 07FD                   ??_initiate 0070                    _PORTBbits 0006  
                  _PORTCbits 0007        __size_of_latch_output 0029          start_initialization 07FD  
                ?_input_data 0070                  ?_input_high 0070                 _latch_output 071A  
         _serial_clock_pulse 076F                    ___latbits 0001          ?_serial_clock_pulse 0070  
          __size_of_initiate 000C         ??_serial_clock_pulse 0070          __size_of_input_data 005D  
        __size_of_input_high 0007                    _input_low 0707                   ?_input_low 0070  
               ??_input_data 0073                 ??_input_high 0073                __size_of_main 002C  
                   _initiate 070E           __end_of_input_data 07FD           __end_of_input_high 0707  
                ??_input_low 0073  
