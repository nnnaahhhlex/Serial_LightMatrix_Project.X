

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Jun 24 11:38:34 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F690
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,merge=1,delta=2
    13                           	psect	text7,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F690 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  008C                     	;# 
    87  008D                     	;# 
    88  008E                     	;# 
    89  008F                     	;# 
    90  0090                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0093                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0095                     	;# 
    97  0095                     	;# 
    98  0096                     	;# 
    99  0096                     	;# 
   100  0097                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009B                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  0115                     	;# 
   113  0116                     	;# 
   114  0118                     	;# 
   115  0119                     	;# 
   116  011A                     	;# 
   117  011B                     	;# 
   118  011E                     	;# 
   119  011F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  019D                     	;# 
   123  019E                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001C                     	;# 
   152  001D                     	;# 
   153  001E                     	;# 
   154  001F                     	;# 
   155  0081                     	;# 
   156  0085                     	;# 
   157  0086                     	;# 
   158  0087                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  008F                     	;# 
   163  0090                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0093                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0095                     	;# 
   170  0095                     	;# 
   171  0096                     	;# 
   172  0096                     	;# 
   173  0097                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009A                     	;# 
   177  009B                     	;# 
   178  009E                     	;# 
   179  009F                     	;# 
   180  010C                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  010F                     	;# 
   185  0115                     	;# 
   186  0116                     	;# 
   187  0118                     	;# 
   188  0119                     	;# 
   189  011A                     	;# 
   190  011B                     	;# 
   191  011E                     	;# 
   192  011F                     	;# 
   193  018C                     	;# 
   194  018D                     	;# 
   195  019D                     	;# 
   196  019E                     	;# 
   197  0006                     _PORTBbits	set	6
   198  0007                     _PORTCbits	set	7
   199  008F                     _OSCCON	set	143
   200  0086                     _TRISB	set	134
   201  0087                     _TRISC	set	135
   202                           
   203                           	psect	cinit
   204  07FD                     start_initialization:	
   205                           ; #config settings
   206                           
   207  07FD                     __initialization:
   208  07FD                     end_of_initialization:	
   209                           ;End of C runtime variable initialization code
   210                           
   211  07FD                     __end_of__initialization:
   212  07FD  0183               	clrf	3
   213  07FE  118A  2F1A         	ljmp	_main	;jump to C main() function
   214                           
   215                           	psect	cstackCOMMON
   216  0070                     __pcstackCOMMON:
   217  0070                     ?_initiate:
   218  0070                     ??_initiate:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ?_red_arrow:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_input_high:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ??_input_high:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_input_low:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ??_input_low:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?_serial_clock_pulse:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ??_serial_clock_pulse:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_main:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_input_data:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ??_input_data:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_latch_output:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ??_latch_output:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     input_data@num:	
   258                           ; 1 bytes @ 0x0
   259                           
   260                           
   261                           ; 1 bytes @ 0x0
   262  0070                     	ds	1
   263  0071                     ??_red_arrow:
   264                           
   265                           ; 1 bytes @ 0x1
   266  0071                     	ds	2
   267  0073                     red_arrow@col:
   268                           
   269                           ; 1 bytes @ 0x3
   270  0073                     	ds	1
   271  0074                     red_arrow@row:
   272                           
   273                           ; 1 bytes @ 0x4
   274  0074                     	ds	1
   275  0075                     red_arrow@i:
   276                           
   277                           ; 2 bytes @ 0x5
   278  0075                     	ds	2
   279  0077                     ??_main:
   280                           
   281                           	psect	maintext
   282  071A                     __pmaintext:	
   283                           ; 1 bytes @ 0x7
   284 ;;
   285 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   286 ;;
   287 ;; *************** function _main *****************
   288 ;; Defined at:
   289 ;;		line 33 in file "Main.c"
   290 ;; Parameters:    Size  Location     Type
   291 ;;		None
   292 ;; Auto vars:     Size  Location     Type
   293 ;;		None
   294 ;; Return value:  Size  Location     Type
   295 ;;                  1    wreg      void 
   296 ;; Registers used:
   297 ;;		wreg, status,2, status,0, pclath, cstack
   298 ;; Tracked objects:
   299 ;;		On entry : B00/0
   300 ;;		On exit  : 0/0
   301 ;;		Unchanged: 0/0
   302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   303 ;;      Params:         0       0       0       0
   304 ;;      Locals:         0       0       0       0
   305 ;;      Temps:          0       0       0       0
   306 ;;      Totals:         0       0       0       0
   307 ;;Total ram usage:        0 bytes
   308 ;; Hardware stack levels required when called: 4
   309 ;; This function calls:
   310 ;;		_initiate
   311 ;;		_red_arrow
   312 ;; This function is called by:
   313 ;;		Startup code after reset
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           
   318                           ;psect for function _main
   319  071A                     _main:
   320  071A                     l795:	
   321                           ;incstack = 0
   322                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   323                           
   324                           
   325                           ;Main.c: 34:     initiate();
   326  071A  118A  2723  118A   	fcall	_initiate
   327  071D                     l27:	
   328                           ;Main.c: 35:     while (1) {
   329                           
   330                           
   331                           ;Main.c: 36:         red_arrow();
   332  071D  118A  2789  118A   	fcall	_red_arrow
   333  0720  2F1D               	goto	l27
   334  0721  118A  2800         	ljmp	start
   335  0723                     __end_of_main:
   336                           
   337                           	psect	text1
   338  0789                     __ptext1:	
   339 ;; *************** function _red_arrow *****************
   340 ;; Defined at:
   341 ;;		line 281 in file "Main.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;  row             1    4[COMMON] unsigned char 
   346 ;;  col             1    3[COMMON] unsigned char 
   347 ;;  i               2    5[COMMON] int 
   348 ;; Return value:  Size  Location     Type
   349 ;;                  1    wreg      void 
   350 ;; Registers used:
   351 ;;		wreg, status,2, status,0, pclath, cstack
   352 ;; Tracked objects:
   353 ;;		On entry : 0/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   357 ;;      Params:         0       0       0       0
   358 ;;      Locals:         4       0       0       0
   359 ;;      Temps:          2       0       0       0
   360 ;;      Totals:         6       0       0       0
   361 ;;Total ram usage:        6 bytes
   362 ;; Hardware stack levels used: 1
   363 ;; Hardware stack levels required when called: 3
   364 ;; This function calls:
   365 ;;		_input_data
   366 ;;		_latch_output
   367 ;; This function is called by:
   368 ;;		_main
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           
   373                           ;psect for function _red_arrow
   374  0789                     _red_arrow:
   375  0789                     l751:	
   376                           ;incstack = 0
   377                           ; Regs used in _red_arrow: [wreg+status,2+status,0+pclath+cstack]
   378                           
   379                           
   380                           ;Main.c: 282:     for (int i = 7; i >=0; i--) {
   381  0789  3007               	movlw	7
   382  078A  00F5               	movwf	red_arrow@i
   383  078B  3000               	movlw	0
   384  078C  00F6               	movwf	red_arrow@i+1
   385  078D                     l757:
   386                           
   387                           ;Main.c: 283:         unsigned char row = 0b10000000;
   388  078D  3080               	movlw	128
   389  078E  00F1               	movwf	??_red_arrow
   390  078F  0871               	movf	??_red_arrow,w
   391  0790  00F4               	movwf	red_arrow@row
   392  0791                     l759:
   393  0791                     l761:
   394                           
   395                           ;Main.c: 286:         if (i != 7) {
   396  0791  3007               	movlw	7
   397  0792  0675               	xorwf	red_arrow@i,w
   398  0793  0476               	iorwf	red_arrow@i+1,w
   399  0794  1903               	btfsc	3,2
   400  0795  2F97               	goto	u91
   401  0796  2F98               	goto	u90
   402  0797                     u91:
   403  0797  2FA5               	goto	l765
   404  0798                     u90:
   405  0798                     l763:
   406                           
   407                           ;Main.c: 287:             row = (row >> i);
   408  0798  0874               	movf	red_arrow@row,w
   409  0799  00F1               	movwf	??_red_arrow
   410  079A  0A75               	incf	red_arrow@i,w
   411  079B  2F9E               	goto	u104
   412  079C                     u105:
   413  079C  1003               	clrc
   414  079D  0CF1               	rrf	??_red_arrow,f
   415  079E                     u104:
   416  079E  3EFF               	addlw	-1
   417  079F  1D03               	skipz
   418  07A0  2F9C               	goto	u105
   419  07A1  0871               	movf	??_red_arrow,w
   420  07A2  00F2               	movwf	??_red_arrow+1
   421  07A3  0872               	movf	??_red_arrow+1,w
   422  07A4  00F4               	movwf	red_arrow@row
   423  07A5                     l765:
   424                           
   425                           ;Main.c: 290:         input_data(row);
   426  07A5  0874               	movf	red_arrow@row,w
   427  07A6  118A  272F  118A   	fcall	_input_data
   428  07A9                     l767:
   429                           
   430                           ;Main.c: 293:         if (i == 7) {
   431  07A9  3007               	movlw	7
   432  07AA  0675               	xorwf	red_arrow@i,w
   433  07AB  0476               	iorwf	red_arrow@i+1,w
   434  07AC  1D03               	btfss	3,2
   435  07AD  2FAF               	goto	u111
   436  07AE  2FB0               	goto	u110
   437  07AF                     u111:
   438  07AF  2FB5               	goto	l771
   439  07B0                     u110:
   440  07B0                     l769:
   441                           
   442                           ;Main.c: 295:             col = 24;
   443  07B0  3018               	movlw	24
   444  07B1  00F1               	movwf	??_red_arrow
   445  07B2  0871               	movf	??_red_arrow,w
   446  07B3  00F3               	movwf	red_arrow@col
   447                           
   448                           ;Main.c: 296:         } else if (i == 0 || i == 1 || i == 2 || i == 3 || i == 6) {
   449  07B4  2FEB               	goto	l789
   450  07B5                     l771:
   451  07B5  0875               	movf	red_arrow@i,w
   452  07B6  0476               	iorwf	red_arrow@i+1,w
   453  07B7  1903               	btfsc	3,2
   454  07B8  2FBA               	goto	u121
   455  07B9  2FBB               	goto	u120
   456  07BA                     u121:
   457  07BA  2FD6               	goto	l781
   458  07BB                     u120:
   459  07BB                     l773:
   460  07BB  0375               	decf	red_arrow@i,w
   461  07BC  0476               	iorwf	red_arrow@i+1,w
   462  07BD  1903               	btfsc	3,2
   463  07BE  2FC0               	goto	u131
   464  07BF  2FC1               	goto	u130
   465  07C0                     u131:
   466  07C0  2FD6               	goto	l781
   467  07C1                     u130:
   468  07C1                     l775:
   469  07C1  3002               	movlw	2
   470  07C2  0675               	xorwf	red_arrow@i,w
   471  07C3  0476               	iorwf	red_arrow@i+1,w
   472  07C4  1903               	btfsc	3,2
   473  07C5  2FC7               	goto	u141
   474  07C6  2FC8               	goto	u140
   475  07C7                     u141:
   476  07C7  2FD6               	goto	l781
   477  07C8                     u140:
   478  07C8                     l777:
   479  07C8  3003               	movlw	3
   480  07C9  0675               	xorwf	red_arrow@i,w
   481  07CA  0476               	iorwf	red_arrow@i+1,w
   482  07CB  1903               	btfsc	3,2
   483  07CC  2FCE               	goto	u151
   484  07CD  2FCF               	goto	u150
   485  07CE                     u151:
   486  07CE  2FD6               	goto	l781
   487  07CF                     u150:
   488  07CF                     l779:
   489  07CF  3006               	movlw	6
   490  07D0  0675               	xorwf	red_arrow@i,w
   491  07D1  0476               	iorwf	red_arrow@i+1,w
   492  07D2  1D03               	btfss	3,2
   493  07D3  2FD5               	goto	u161
   494  07D4  2FD6               	goto	u160
   495  07D5                     u161:
   496  07D5  2FDB               	goto	l783
   497  07D6                     u160:
   498  07D6                     l781:
   499                           
   500                           ;Main.c: 298:             col = 60;
   501  07D6  303C               	movlw	60
   502  07D7  00F1               	movwf	??_red_arrow
   503  07D8  0871               	movf	??_red_arrow,w
   504  07D9  00F3               	movwf	red_arrow@col
   505                           
   506                           ;Main.c: 299:         } else if (i == 5) {
   507  07DA  2FEB               	goto	l789
   508  07DB                     l783:
   509  07DB  3005               	movlw	5
   510  07DC  0675               	xorwf	red_arrow@i,w
   511  07DD  0476               	iorwf	red_arrow@i+1,w
   512  07DE  1D03               	btfss	3,2
   513  07DF  2FE1               	goto	u171
   514  07E0  2FE2               	goto	u170
   515  07E1                     u171:
   516  07E1  2FE7               	goto	l787
   517  07E2                     u170:
   518  07E2                     l785:
   519                           
   520                           ;Main.c: 301:             col = 126;
   521  07E2  307E               	movlw	126
   522  07E3  00F1               	movwf	??_red_arrow
   523  07E4  0871               	movf	??_red_arrow,w
   524  07E5  00F3               	movwf	red_arrow@col
   525                           
   526                           ;Main.c: 302:         } else {
   527  07E6  2FEB               	goto	l789
   528  07E7                     l787:
   529                           
   530                           ;Main.c: 304:             col = 255;
   531  07E7  30FF               	movlw	255
   532  07E8  00F1               	movwf	??_red_arrow
   533  07E9  0871               	movf	??_red_arrow,w
   534  07EA  00F3               	movwf	red_arrow@col
   535  07EB                     l789:
   536                           
   537                           ;Main.c: 306:         input_data(col);
   538  07EB  0873               	movf	red_arrow@col,w
   539  07EC  118A  272F  118A   	fcall	_input_data
   540                           
   541                           ;Main.c: 307:         latch_output();
   542  07EF  118A  2706  118A   	fcall	_latch_output
   543  07F2                     l791:
   544                           
   545                           ;Main.c: 308:     }
   546  07F2  30FF               	movlw	255
   547  07F3  07F5               	addwf	red_arrow@i,f
   548  07F4  1803               	skipnc
   549  07F5  0AF6               	incf	red_arrow@i+1,f
   550  07F6  30FF               	movlw	255
   551  07F7  07F6               	addwf	red_arrow@i+1,f
   552  07F8                     l793:
   553  07F8  1FF6               	btfss	red_arrow@i+1,7
   554  07F9  2FFB               	goto	u181
   555  07FA  2FFC               	goto	u180
   556  07FB                     u181:
   557  07FB  2F8D               	goto	l757
   558  07FC                     u180:
   559  07FC                     l95:
   560  07FC  0008               	return
   561  07FD                     __end_of_red_arrow:
   562                           
   563                           	psect	text2
   564  0706                     __ptext2:	
   565 ;; *************** function _latch_output *****************
   566 ;; Defined at:
   567 ;;		line 224 in file "Main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		None
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   581 ;;      Params:         0       0       0       0
   582 ;;      Locals:         0       0       0       0
   583 ;;      Temps:          0       0       0       0
   584 ;;      Totals:         0       0       0       0
   585 ;;Total ram usage:        0 bytes
   586 ;; Hardware stack levels used: 1
   587 ;; This function calls:
   588 ;;		Nothing
   589 ;; This function is called by:
   590 ;;		_red_arrow
   591 ;;		_green_arrow
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           
   596                           ;psect for function _latch_output
   597  0706                     _latch_output:
   598  0706                     l745:	
   599                           ;incstack = 0
   600                           ; Regs used in _latch_output: []
   601                           
   602                           
   603                           ;Main.c: 225:     PORTCbits.RC4 = 0;
   604  0706  1283               	bcf	3,5	;RP0=0, select bank0
   605  0707  1303               	bcf	3,6	;RP1=0, select bank0
   606  0708  1207               	bcf	7,4	;volatile
   607                           
   608                           ;Main.c: 227:     PORTCbits.RC4 = 1;
   609  0709  1607               	bsf	7,4	;volatile
   610                           
   611                           ;Main.c: 229:     PORTCbits.RC4 = 0;
   612  070A  1207               	bcf	7,4	;volatile
   613  070B                     l67:
   614  070B  0008               	return
   615  070C                     __end_of_latch_output:
   616                           
   617                           	psect	text3
   618  072F                     __ptext3:	
   619 ;; *************** function _input_data *****************
   620 ;; Defined at:
   621 ;;		line 116 in file "Main.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;  num             1    wreg     unsigned char 
   624 ;; Auto vars:     Size  Location     Type
   625 ;;  num             1    0[COMMON] unsigned char 
   626 ;; Return value:  Size  Location     Type
   627 ;;                  1    wreg      void 
   628 ;; Registers used:
   629 ;;		wreg, status,2, status,0, pclath, cstack
   630 ;; Tracked objects:
   631 ;;		On entry : 0/0
   632 ;;		On exit  : 0/0
   633 ;;		Unchanged: 0/0
   634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   635 ;;      Params:         0       0       0       0
   636 ;;      Locals:         1       0       0       0
   637 ;;      Temps:          0       0       0       0
   638 ;;      Totals:         1       0       0       0
   639 ;;Total ram usage:        1 bytes
   640 ;; Hardware stack levels used: 1
   641 ;; Hardware stack levels required when called: 2
   642 ;; This function calls:
   643 ;;		_input_high
   644 ;;		_input_low
   645 ;; This function is called by:
   646 ;;		_red_arrow
   647 ;;		_green_arrow
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _input_data
   653  072F                     _input_data:
   654                           
   655                           ;incstack = 0
   656                           ; Regs used in _input_data: [wreg+status,2+status,0+pclath+cstack]
   657                           ;input_data@num stored from wreg
   658  072F  00F0               	movwf	input_data@num
   659  0730                     l697:
   660                           
   661                           ;Main.c: 123:     if ((num & 0x01) == 0x01) {
   662  0730  1C70               	btfss	input_data@num,0
   663  0731  2F33               	goto	u11
   664  0732  2F34               	goto	u10
   665  0733                     u11:
   666  0733  2F38               	goto	l701
   667  0734                     u10:
   668  0734                     l699:
   669                           
   670                           ;Main.c: 126:         input_high();
   671  0734  118A  270C  118A   	fcall	_input_high
   672                           
   673                           ;Main.c: 128:     } else input_low();
   674  0737  2F3B               	goto	l703
   675  0738                     l701:
   676  0738  118A  2713  118A   	fcall	_input_low
   677  073B                     l703:
   678                           
   679                           ;Main.c: 132:     if ((num & 0x02) == 0x02) {
   680  073B  1CF0               	btfss	input_data@num,1
   681  073C  2F3E               	goto	u21
   682  073D  2F3F               	goto	u20
   683  073E                     u21:
   684  073E  2F43               	goto	l707
   685  073F                     u20:
   686  073F                     l705:
   687                           
   688                           ;Main.c: 135:         input_high();
   689  073F  118A  270C  118A   	fcall	_input_high
   690                           
   691                           ;Main.c: 137:     } else input_low();
   692  0742  2F46               	goto	l709
   693  0743                     l707:
   694  0743  118A  2713  118A   	fcall	_input_low
   695  0746                     l709:
   696                           
   697                           ;Main.c: 141:     if ((num & 0x04) == 0x04) {
   698  0746  1D70               	btfss	input_data@num,2
   699  0747  2F49               	goto	u31
   700  0748  2F4A               	goto	u30
   701  0749                     u31:
   702  0749  2F4E               	goto	l713
   703  074A                     u30:
   704  074A                     l711:
   705                           
   706                           ;Main.c: 144:         input_high();
   707  074A  118A  270C  118A   	fcall	_input_high
   708                           
   709                           ;Main.c: 146:     } else input_low();
   710  074D  2F51               	goto	l715
   711  074E                     l713:
   712  074E  118A  2713  118A   	fcall	_input_low
   713  0751                     l715:
   714                           
   715                           ;Main.c: 150:     if ((num & 0x08) == 0x08) {
   716  0751  1DF0               	btfss	input_data@num,3
   717  0752  2F54               	goto	u41
   718  0753  2F55               	goto	u40
   719  0754                     u41:
   720  0754  2F59               	goto	l719
   721  0755                     u40:
   722  0755                     l717:
   723                           
   724                           ;Main.c: 153:         input_high();
   725  0755  118A  270C  118A   	fcall	_input_high
   726                           
   727                           ;Main.c: 155:     } else input_low();
   728  0758  2F5C               	goto	l721
   729  0759                     l719:
   730  0759  118A  2713  118A   	fcall	_input_low
   731  075C                     l721:
   732                           
   733                           ;Main.c: 159:     if ((num & 0x10) == 0x10) {
   734  075C  1E70               	btfss	input_data@num,4
   735  075D  2F5F               	goto	u51
   736  075E  2F60               	goto	u50
   737  075F                     u51:
   738  075F  2F64               	goto	l725
   739  0760                     u50:
   740  0760                     l723:
   741                           
   742                           ;Main.c: 162:         input_high();
   743  0760  118A  270C  118A   	fcall	_input_high
   744                           
   745                           ;Main.c: 164:     } else input_low();
   746  0763  2F67               	goto	l727
   747  0764                     l725:
   748  0764  118A  2713  118A   	fcall	_input_low
   749  0767                     l727:
   750                           
   751                           ;Main.c: 168:     if ((num & 0x20) == 0x20) {
   752  0767  1EF0               	btfss	input_data@num,5
   753  0768  2F6A               	goto	u61
   754  0769  2F6B               	goto	u60
   755  076A                     u61:
   756  076A  2F6F               	goto	l731
   757  076B                     u60:
   758  076B                     l729:
   759                           
   760                           ;Main.c: 171:         input_high();
   761  076B  118A  270C  118A   	fcall	_input_high
   762                           
   763                           ;Main.c: 173:     } else input_low();
   764  076E  2F72               	goto	l733
   765  076F                     l731:
   766  076F  118A  2713  118A   	fcall	_input_low
   767  0772                     l733:
   768                           
   769                           ;Main.c: 177:     if ((num & 0x40) == 0x40) {
   770  0772  1F70               	btfss	input_data@num,6
   771  0773  2F75               	goto	u71
   772  0774  2F76               	goto	u70
   773  0775                     u71:
   774  0775  2F7A               	goto	l737
   775  0776                     u70:
   776  0776                     l735:
   777                           
   778                           ;Main.c: 180:         input_high();
   779  0776  118A  270C  118A   	fcall	_input_high
   780                           
   781                           ;Main.c: 182:     } else input_low();
   782  0779  2F7D               	goto	l739
   783  077A                     l737:
   784  077A  118A  2713  118A   	fcall	_input_low
   785  077D                     l739:
   786                           
   787                           ;Main.c: 188:     if ((num & 0x80) == 0x80) {
   788  077D  1FF0               	btfss	input_data@num,7
   789  077E  2F80               	goto	u81
   790  077F  2F81               	goto	u80
   791  0780                     u81:
   792  0780  2F85               	goto	l743
   793  0781                     u80:
   794  0781                     l741:
   795                           
   796                           ;Main.c: 191:         input_high();
   797  0781  118A  270C  118A   	fcall	_input_high
   798                           
   799                           ;Main.c: 193:     } else input_low();
   800  0784  2F88               	goto	l55
   801  0785                     l743:
   802  0785  118A  2713  118A   	fcall	_input_low
   803  0788                     l55:
   804  0788  0008               	return
   805  0789                     __end_of_input_data:
   806                           
   807                           	psect	text4
   808  0713                     __ptext4:	
   809 ;; *************** function _input_low *****************
   810 ;; Defined at:
   811 ;;		line 207 in file "Main.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		status,2, status,0, pclath, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   825 ;;      Params:         0       0       0       0
   826 ;;      Locals:         0       0       0       0
   827 ;;      Temps:          0       0       0       0
   828 ;;      Totals:         0       0       0       0
   829 ;;Total ram usage:        0 bytes
   830 ;; Hardware stack levels used: 1
   831 ;; Hardware stack levels required when called: 1
   832 ;; This function calls:
   833 ;;		_serial_clock_pulse
   834 ;; This function is called by:
   835 ;;		_input_data
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           
   840                           ;psect for function _input_low
   841  0713                     _input_low:
   842  0713                     l693:	
   843                           ;incstack = 0
   844                           ; Regs used in _input_low: [status,2+status,0+pclath+cstack]
   845                           
   846                           
   847                           ;Main.c: 209:     PORTBbits.RB4 = 0;
   848  0713  1283               	bcf	3,5	;RP0=0, select bank0
   849  0714  1303               	bcf	3,6	;RP1=0, select bank0
   850  0715  1206               	bcf	6,4	;volatile
   851  0716                     l695:
   852                           
   853                           ;Main.c: 210:     serial_clock_pulse();
   854  0716  118A  2700  118A   	fcall	_serial_clock_pulse
   855  0719                     l61:
   856  0719  0008               	return
   857  071A                     __end_of_input_low:
   858                           
   859                           	psect	text5
   860  070C                     __ptext5:	
   861 ;; *************** function _input_high *****************
   862 ;; Defined at:
   863 ;;		line 199 in file "Main.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;		None
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		status,2, status,0, pclath, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   877 ;;      Params:         0       0       0       0
   878 ;;      Locals:         0       0       0       0
   879 ;;      Temps:          0       0       0       0
   880 ;;      Totals:         0       0       0       0
   881 ;;Total ram usage:        0 bytes
   882 ;; Hardware stack levels used: 1
   883 ;; Hardware stack levels required when called: 1
   884 ;; This function calls:
   885 ;;		_serial_clock_pulse
   886 ;; This function is called by:
   887 ;;		_input_data
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           
   892                           ;psect for function _input_high
   893  070C                     _input_high:
   894  070C                     l689:	
   895                           ;incstack = 0
   896                           ; Regs used in _input_high: [status,2+status,0+pclath+cstack]
   897                           
   898                           
   899                           ;Main.c: 201:     PORTBbits.RB4 = 1;
   900  070C  1283               	bcf	3,5	;RP0=0, select bank0
   901  070D  1303               	bcf	3,6	;RP1=0, select bank0
   902  070E  1606               	bsf	6,4	;volatile
   903  070F                     l691:
   904                           
   905                           ;Main.c: 202:     serial_clock_pulse();
   906  070F  118A  2700  118A   	fcall	_serial_clock_pulse
   907  0712                     l58:
   908  0712  0008               	return
   909  0713                     __end_of_input_high:
   910                           
   911                           	psect	text6
   912  0700                     __ptext6:	
   913 ;; *************** function _serial_clock_pulse *****************
   914 ;; Defined at:
   915 ;;		line 215 in file "Main.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      void 
   922 ;; Registers used:
   923 ;;		None
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   929 ;;      Params:         0       0       0       0
   930 ;;      Locals:         0       0       0       0
   931 ;;      Temps:          0       0       0       0
   932 ;;      Totals:         0       0       0       0
   933 ;;Total ram usage:        0 bytes
   934 ;; Hardware stack levels used: 1
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_input_high
   939 ;;		_input_low
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           
   944                           ;psect for function _serial_clock_pulse
   945  0700                     _serial_clock_pulse:
   946  0700                     l687:	
   947                           ;incstack = 0
   948                           ; Regs used in _serial_clock_pulse: []
   949                           
   950                           
   951                           ;Main.c: 216:     PORTCbits.RC6 = 0;
   952  0700  1283               	bcf	3,5	;RP0=0, select bank0
   953  0701  1303               	bcf	3,6	;RP1=0, select bank0
   954  0702  1307               	bcf	7,6	;volatile
   955                           
   956                           ;Main.c: 218:     PORTCbits.RC6 = 1;
   957  0703  1707               	bsf	7,6	;volatile
   958                           
   959                           ;Main.c: 220:     PORTCbits.RC6 = 0;
   960  0704  1307               	bcf	7,6	;volatile
   961  0705                     l64:
   962  0705  0008               	return
   963  0706                     __end_of_serial_clock_pulse:
   964                           
   965                           	psect	text7
   966  0723                     __ptext7:	
   967 ;; *************** function _initiate *****************
   968 ;; Defined at:
   969 ;;		line 41 in file "Main.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;		None
   972 ;; Auto vars:     Size  Location     Type
   973 ;;		None
   974 ;; Return value:  Size  Location     Type
   975 ;;                  1    wreg      void 
   976 ;; Registers used:
   977 ;;		wreg
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   983 ;;      Params:         0       0       0       0
   984 ;;      Locals:         0       0       0       0
   985 ;;      Temps:          0       0       0       0
   986 ;;      Totals:         0       0       0       0
   987 ;;Total ram usage:        0 bytes
   988 ;; Hardware stack levels used: 1
   989 ;; This function calls:
   990 ;;		Nothing
   991 ;; This function is called by:
   992 ;;		_main
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           
   997                           ;psect for function _initiate
   998  0723                     _initiate:
   999  0723                     l747:	
  1000                           ;incstack = 0
  1001                           ; Regs used in _initiate: [wreg]
  1002                           
  1003                           
  1004                           ;Main.c: 43:     TRISC = 0b00001111;
  1005  0723  300F               	movlw	15
  1006  0724  1683               	bsf	3,5	;RP0=1, select bank1
  1007  0725  1303               	bcf	3,6	;RP1=0, select bank1
  1008  0726  0087               	movwf	7	;volatile
  1009                           
  1010                           ;Main.c: 44:     TRISB = 0b01100000;
  1011  0727  3060               	movlw	96
  1012  0728  0086               	movwf	6	;volatile
  1013                           
  1014                           ;Main.c: 45:     OSCCON = 0b01110111;
  1015  0729  3077               	movlw	119
  1016  072A  008F               	movwf	15	;volatile
  1017  072B                     l749:
  1018                           
  1019                           ;Main.c: 46:     PORTCbits.RC6 = 0;
  1020  072B  1283               	bcf	3,5	;RP0=0, select bank0
  1021  072C  1303               	bcf	3,6	;RP1=0, select bank0
  1022  072D  1307               	bcf	7,6	;volatile
  1023  072E                     l33:
  1024  072E  0008               	return
  1025  072F                     __end_of_initiate:
  1026  007E                     btemp	set	126	;btemp
  1027  007E                     wtemp0	set	126
  1028                           
  1029                           	psect	config
  1030                           
  1031                           ;Config register CONFIG @ 0x2007
  1032                           ;	Oscillator Selection bits
  1033                           ;	FOSC = INTRCCLK, INTOSC oscillator: CLKOUT function on RA4/OSC2/CLKOUT pin, I/O functi
      +                          on on RA5/OSC1/CLKIN
  1034                           ;	Watchdog Timer Enable bit
  1035                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1036                           ;	Power-up Timer Enable bit
  1037                           ;	PWRTE = OFF, PWRT disabled
  1038                           ;	MCLR Pin Function Select bit
  1039                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  1040                           ;	Code Protection bit
  1041                           ;	CP = OFF, Program memory code protection is disabled
  1042                           ;	Data Code Protection bit
  1043                           ;	CPD = OFF, Data memory code protection is disabled
  1044                           ;	Brown-out Reset Selection bits
  1045                           ;	BOREN = OFF, BOR disabled
  1046                           ;	Internal External Switchover bit
  1047                           ;	IESO = OFF, Internal External Switchover mode is disabled
  1048                           ;	Fail-Safe Clock Monitor Enabled bit
  1049                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1050  2007                     	org	8199
  1051  2007  38D5               	dw	14549

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_red_arrow
    _red_arrow->_input_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     330
                           _initiate
                          _red_arrow
 ---------------------------------------------------------------------------------
 (1) _red_arrow                                            6     6      0     330
                                              1 COMMON     6     6      0
                         _input_data
                       _latch_output
 ---------------------------------------------------------------------------------
 (2) _latch_output                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _input_data                                           1     1      0     120
                                              0 COMMON     1     1      0
                         _input_high
                          _input_low
 ---------------------------------------------------------------------------------
 (3) _input_low                                            0     0      0       0
                 _serial_clock_pulse
 ---------------------------------------------------------------------------------
 (3) _input_high                                           0     0      0       0
                 _serial_clock_pulse
 ---------------------------------------------------------------------------------
 (4) _serial_clock_pulse                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initiate                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initiate
   _red_arrow
     _input_data
       _input_high
         _serial_clock_pulse
       _input_low
         _serial_clock_pulse
     _latch_output

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Jun 24 11:38:34 2022

__size_of_serial_clock_pulse 0006                           l33 072E                           l27 071D  
                         l61 0719                           l55 0788                           l64 0705  
                         l58 0712                           l67 070B                           l95 07FC  
                         u10 0734                           u11 0733                           u20 073F  
                         u21 073E                           u30 074A                           u31 0749  
                         u40 0755                           u41 0754                           u50 0760  
                         u51 075F                           u60 076B                           u61 076A  
                         u70 0776                           u71 0775                           u80 0781  
                         u81 0780                           u90 0798                           u91 0797  
                        l701 0738                          l711 074A                          l703 073B  
                        l721 075C                          l713 074E                          l705 073F  
                        l731 076F                          l723 0760                          l715 0751  
                        l707 0743                          l741 0781                          l733 0772  
                        l725 0764                          l717 0755                          l709 0746  
                        l743 0785                          l735 0776                          l727 0767  
                        l719 0759                          l751 0789                          l737 077A  
                        l729 076B                          l745 0706                          l761 0791  
                        l747 0723                          l691 070F                          l739 077D  
                        l771 07B5                          l763 0798                          l749 072B  
                        l693 0713                          l773 07BB                          l781 07D6  
                        l765 07A5                          l757 078D                          l687 0700  
                        l695 0716                          l791 07F2                          l783 07DB  
                        l775 07C1                          l767 07A9                          l759 0791  
                        l689 070C                          l697 0730                          l793 07F8  
                        l785 07E2                          l777 07C8                          l769 07B0  
                        l699 0734                          l787 07E7                          l779 07CF  
                        l795 071A                          l789 07EB                          u110 07B0  
                        u111 07AF                          u120 07BB                          u104 079E  
                        u121 07BA                          u105 079C                          u130 07C1  
                        u131 07C0                          u140 07C8                          u141 07C7  
                        u150 07CF                          u151 07CE                          u160 07D6  
                        u161 07D5                          u170 07E2                          u171 07E1  
                        u180 07FC                          u181 07FB                         _main 071A  
                       btemp 007E                         start 0000                        ?_main 0070  
                      _TRISB 0086                        _TRISC 0087                ?_latch_output 0070  
                      status 0003                        wtemp0 007E              __initialization 07FD  
               __end_of_main 0723                       ??_main 0077               ??_latch_output 0070  
                     _OSCCON 008F             __end_of_initiate 072F                input_data@num 0070  
    __end_of__initialization 07FD               __pcstackCOMMON 0070   __end_of_serial_clock_pulse 0706  
         __size_of_red_arrow 0074                   __pmaintext 071A         __end_of_latch_output 070C  
         __size_of_input_low 0007                    ?_initiate 0070                      __ptext1 0789  
                    __ptext2 0706                      __ptext3 072F                      __ptext4 0713  
                    __ptext5 070C                      __ptext6 0700                      __ptext7 0723  
          __end_of_red_arrow 07FD                   _input_data 072F                   _input_high 070C  
          __end_of_input_low 071A         end_of_initialization 07FD                   ??_initiate 0070  
                  _PORTBbits 0006                    _PORTCbits 0007                 red_arrow@col 0073  
               red_arrow@row 0074        __size_of_latch_output 0006          start_initialization 07FD  
                ?_input_data 0070                  ?_input_high 0070                 _latch_output 0706  
         _serial_clock_pulse 0700                   red_arrow@i 0075                    ___latbits 0001  
        ?_serial_clock_pulse 0070            __size_of_initiate 000C         ??_serial_clock_pulse 0070  
        __size_of_input_data 005A          __size_of_input_high 0007                    _red_arrow 0789  
                  _input_low 0713                   ?_red_arrow 0070                   ?_input_low 0070  
               ??_input_data 0070                 ??_input_high 0070                __size_of_main 0009  
                   _initiate 0723           __end_of_input_data 0789           __end_of_input_high 0713  
                ??_red_arrow 0071                  ??_input_low 0070  
